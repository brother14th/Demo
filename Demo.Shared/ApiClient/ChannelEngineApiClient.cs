//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Demo.Shared.ApiClient
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IChannelEngineApiClient
    {
        /// <summary>Get Cancellations.</summary>
        /// <param name="createdSince">Filter on the create date of the cancellation in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantCancellationResponse> CancellationGetForMerchantAsync(System.DateTimeOffset? createdSince, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Cancellations.</summary>
        /// <param name="createdSince">Filter on the create date of the cancellation in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantCancellationResponse> CancellationGetForMerchantAsync(System.DateTimeOffset? createdSince, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create Cancellation.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> CancellationCreateAsync(MerchantCancellationRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Cancellation.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> CancellationCreateAsync(MerchantCancellationRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Channels.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfChannelGlobalChannelResponse> Channel_PluginsGetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Channels.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfChannelGlobalChannelResponse> Channel_PluginsGetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the BuyBox winner prices</summary>
        /// <param name="channelId">The id of the channel</param>
        /// <param name="gtinList">Search products by submitting a list of GTIN's. (optional)&lt;br /&gt;Max. 2000.</param>
        /// <param name="skuList">Search products by submitting a list of Sku's. (optional)&lt;br /&gt;Max. 2000. If GtinList is already set, this one is ignored.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantProductWithBuyBoxPrice> CompetitionPricesGetBuyBoxPricesAsync(int? channelId, System.Collections.Generic.IEnumerable<string> gtinList, System.Collections.Generic.IEnumerable<string> skuList, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the BuyBox winner prices</summary>
        /// <param name="channelId">The id of the channel</param>
        /// <param name="gtinList">Search products by submitting a list of GTIN's. (optional)&lt;br /&gt;Max. 2000.</param>
        /// <param name="skuList">Search products by submitting a list of Sku's. (optional)&lt;br /&gt;Max. 2000. If GtinList is already set, this one is ignored.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantProductWithBuyBoxPrice> CompetitionPricesGetBuyBoxPricesAsync(int? channelId, System.Collections.Generic.IEnumerable<string> gtinList, System.Collections.Generic.IEnumerable<string> skuList, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Listed Products</summary>
        /// <param name="channelId">The id of a channel</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfChannelListedProductResponse> Listed_ProductGetByFilterAsync(int channelId, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Listed Products</summary>
        /// <param name="channelId">The id of a channel</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfChannelListedProductResponse> Listed_ProductGetByFilterAsync(int channelId, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Notifications.</summary>
        /// <param name="fromDate">Filter on the notification date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the notification date, until this date. This date is exclusive.</param>
        /// <param name="types">Notification type(s) to filter on.</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="merchantReturnNos">Filter on unique return reference used by the merchant.</param>
        /// <param name="channelReturnNos">Filter on unique return reference used by the channel.</param>
        /// <param name="merchantShipmentNos">Filter on unique shipment reference used by the merchant.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantNotificationResponse> NotificationIndexAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, System.Collections.Generic.IEnumerable<NotificationType> types, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, System.Collections.Generic.IEnumerable<string> merchantReturnNos, System.Collections.Generic.IEnumerable<string> channelReturnNos, System.Collections.Generic.IEnumerable<string> merchantShipmentNos, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Notifications.</summary>
        /// <param name="fromDate">Filter on the notification date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the notification date, until this date. This date is exclusive.</param>
        /// <param name="types">Notification type(s) to filter on.</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="merchantReturnNos">Filter on unique return reference used by the merchant.</param>
        /// <param name="channelReturnNos">Filter on unique return reference used by the channel.</param>
        /// <param name="merchantShipmentNos">Filter on unique shipment reference used by the merchant.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantNotificationResponse> NotificationIndexAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, System.Collections.Generic.IEnumerable<NotificationType> types, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, System.Collections.Generic.IEnumerable<string> merchantReturnNos, System.Collections.Generic.IEnumerable<string> channelReturnNos, System.Collections.Generic.IEnumerable<string> merchantShipmentNos, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update stock and/or price.</summary>
        /// <param name="body">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockPriceUpdateAsync(System.Collections.Generic.IEnumerable<MerchantStockPriceUpdateRequest> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update stock and/or price.</summary>
        /// <param name="body">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockPriceUpdateAsync(System.Collections.Generic.IEnumerable<MerchantStockPriceUpdateRequest> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update only stock.</summary>
        /// <param name="body">References to the new values for the stock fields</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockUpdateAsync(System.Collections.Generic.IEnumerable<MerchantOfferStockUpdateRequest> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update only stock.</summary>
        /// <param name="body">References to the new values for the stock fields</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockUpdateAsync(System.Collections.Generic.IEnumerable<MerchantOfferStockUpdateRequest> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get stock for products.</summary>
        /// <param name="skus">List of your products' sku's.</param>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0)</param>
        /// <param name="pageSize">Number of items to return (default 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantOfferGetStockResponse> OfferGetStockAsync(System.Collections.Generic.IEnumerable<string> skus, System.Collections.Generic.IEnumerable<int> stockLocationIds, int? pageIndex, int? pageSize);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get stock for products.</summary>
        /// <param name="skus">List of your products' sku's.</param>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0)</param>
        /// <param name="pageSize">Number of items to return (default 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantOfferGetStockResponse> OfferGetStockAsync(System.Collections.Generic.IEnumerable<string> skus, System.Collections.Generic.IEnumerable<int> stockLocationIds, int? pageIndex, int? pageSize, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Orders By Filter.</summary>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on.</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel.</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel.</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.</param>
        /// <param name="toCreatedAtDate">Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.</param>
        /// <param name="channelIds">Filter orders on channel(s).</param>
        /// <param name="stockLocationIds">Filter on stock locations</param>
        /// <param name="isAcknowledged">Filter on acknowledged value</param>
        /// <param name="fromUpdatedAtDate">Filter on the order update date, starting from this date. This date is inclusive.</param>
        /// <param name="toUpdatedAtDate">Filter on the order update date, unitl this date. This date is exclusive.</param>
        /// <param name="fromAcknowledgedDate">Filter on the order acknowledged date, starting from this date. This date is inclusive.</param>
        /// <param name="toAcknowledgedDate">Filter on the order acknowledged date, unitl this date. This date is exclusive.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetByFilterAsync(System.Collections.Generic.IEnumerable<OrderStatusView> statuses, System.Collections.Generic.IEnumerable<string> emailAddresses, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, System.DateTimeOffset? fromCreatedAtDate, System.DateTimeOffset? toCreatedAtDate, bool? excludeMarketplaceFulfilledOrdersAndLines, FulfillmentType? fulfillmentType, bool? onlyWithCancellationRequests, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<int> stockLocationIds, bool? isAcknowledged, System.DateTimeOffset? fromUpdatedAtDate, System.DateTimeOffset? toUpdatedAtDate, System.DateTimeOffset? fromAcknowledgedDate, System.DateTimeOffset? toAcknowledgedDate, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Orders By Filter.</summary>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on.</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel.</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel.</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.</param>
        /// <param name="toCreatedAtDate">Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.</param>
        /// <param name="channelIds">Filter orders on channel(s).</param>
        /// <param name="stockLocationIds">Filter on stock locations</param>
        /// <param name="isAcknowledged">Filter on acknowledged value</param>
        /// <param name="fromUpdatedAtDate">Filter on the order update date, starting from this date. This date is inclusive.</param>
        /// <param name="toUpdatedAtDate">Filter on the order update date, unitl this date. This date is exclusive.</param>
        /// <param name="fromAcknowledgedDate">Filter on the order acknowledged date, starting from this date. This date is inclusive.</param>
        /// <param name="toAcknowledgedDate">Filter on the order acknowledged date, unitl this date. This date is exclusive.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetByFilterAsync(System.Collections.Generic.IEnumerable<OrderStatusView> statuses, System.Collections.Generic.IEnumerable<string> emailAddresses, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, System.DateTimeOffset? fromCreatedAtDate, System.DateTimeOffset? toCreatedAtDate, bool? excludeMarketplaceFulfilledOrdersAndLines, FulfillmentType? fulfillmentType, bool? onlyWithCancellationRequests, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<int> stockLocationIds, bool? isAcknowledged, System.DateTimeOffset? fromUpdatedAtDate, System.DateTimeOffset? toUpdatedAtDate, System.DateTimeOffset? fromAcknowledgedDate, System.DateTimeOffset? toAcknowledgedDate, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get New Orders.</summary>
        /// <param name="stockLocationId">The ChannelEngine id of the stock location.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetNewAsync(int? stockLocationId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get New Orders.</summary>
        /// <param name="stockLocationId">The ChannelEngine id of the stock location.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetNewAsync(int? stockLocationId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Acknowledge Order.</summary>
        /// <param name="body">Relations between the id's returned by ChannelEngine and the references which the merchant uses.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> OrderAcknowledgeAsync(MerchantOrderAcknowledgementRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Acknowledge Order.</summary>
        /// <param name="body">Relations between the id's returned by ChannelEngine and the references which the merchant uses.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> OrderAcknowledgeAsync(MerchantOrderAcknowledgementRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Download Invoice.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address' country's language.</param>
        /// <returns>Invoice PDF</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> OrderInvoiceAsync(string merchantOrderNo, bool? useCustomerCulture);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download Invoice.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address' country's language.</param>
        /// <returns>Invoice PDF</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> OrderInvoiceAsync(string merchantOrderNo, bool? useCustomerCulture, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Upload Invoice.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> OrderUploadInvoiceAsync(string merchantOrderNo, System.IO.Stream body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload Invoice.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> OrderUploadInvoiceAsync(string merchantOrderNo, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Download Packing Slip.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address' country's language.</param>
        /// <returns>Packing Slip PDF</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> OrderPackingSlipAsync(string merchantOrderNo, bool? useCustomerCulture);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download Packing Slip.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address' country's language.</param>
        /// <returns>Packing Slip PDF</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> OrderPackingSlipAsync(string merchantOrderNo, bool? useCustomerCulture, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update Comment.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> OrderUpdateAsync(MerchantOrderCommentUpdateRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Comment.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> OrderUpdateAsync(MerchantOrderCommentUpdateRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Upsert Products.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductCreateAsync(bool? ignoreStock, System.Collections.Generic.IEnumerable<MerchantProductRequest> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upsert Products.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductCreateAsync(bool? ignoreStock, System.Collections.Generic.IEnumerable<MerchantProductRequest> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Products.</summary>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters.</param>
        /// <param name="eanList">Search products by submitting a list of EAN's.</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo's.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantProductResponse> ProductGetByFilterAsync(string search, System.Collections.Generic.IEnumerable<string> eanList, System.Collections.Generic.IEnumerable<string> merchantProductNoList, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Products.</summary>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters.</param>
        /// <param name="eanList">Search products by submitting a list of EAN's.</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo's.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantProductResponse> ProductGetByFilterAsync(string search, System.Collections.Generic.IEnumerable<string> eanList, System.Collections.Generic.IEnumerable<string> merchantProductNoList, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Bulk Patch Products</summary>
        /// <param name="body">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductBulkPatchAsync(PatchMerchantProductDto body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Bulk Patch Products</summary>
        /// <param name="body">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductBulkPatchAsync(PatchMerchantProductDto body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete Product.</summary>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ProductDeleteAsync(string merchantProductNo);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Product.</summary>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ProductDeleteAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Product.</summary>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfMerchantProductResponse> ProductGetByMerchantProductNoAsync(string merchantProductNo);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Product.</summary>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfMerchantProductResponse> ProductGetByMerchantProductNoAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Patch product</summary>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="body">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you're updating (used with operations "add" and "replace").&lt;br /&gt; Path contains the path to the property you're updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform ("add","replace","remove").&lt;br /&gt; From is only used when using the "move" operation. It refers to the source path of the value to be moved.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductPatchAsync(string merchantProductNo, System.Collections.Generic.IEnumerable<Operation> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Patch product</summary>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="body">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you're updating (used with operations "add" and "replace").&lt;br /&gt; Path contains the path to the property you're updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform ("add","replace","remove").&lt;br /&gt; From is only used when using the "move" operation. It refers to the source path of the value to be moved.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductPatchAsync(string merchantProductNo, System.Collections.Generic.IEnumerable<Operation> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete multiple Products.</summary>
        /// <param name="body">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ProductBulkDeleteAsync(System.Collections.Generic.IEnumerable<string> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete multiple Products.</summary>
        /// <param name="body">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ProductBulkDeleteAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get product bundles.</summary>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters.</param>
        /// <param name="eanList">Search products by submitting a list of EAN's.</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo's.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantProductBundleResponse> ProductBundleGetByFilterAsync(string search, System.Collections.Generic.IEnumerable<string> eanList, System.Collections.Generic.IEnumerable<string> merchantProductNoList, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get product bundles.</summary>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters.</param>
        /// <param name="eanList">Search products by submitting a list of EAN's.</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo's.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantProductBundleResponse> ProductBundleGetByFilterAsync(string search, System.Collections.Generic.IEnumerable<string> eanList, System.Collections.Generic.IEnumerable<string> merchantProductNoList, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Returns.</summary>
        /// <param name="statuses">Return status(es) to filter on.</param>
        /// <param name="reasons">Return reason(s) to filter on.</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive.</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetDeclaredByChannelAsync(System.Collections.Generic.IEnumerable<ReturnStatus> statuses, System.Collections.Generic.IEnumerable<ReturnReason> reasons, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, bool? isAcknowledged, int? page, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, FulfillmentType? fulfillmentType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Returns.</summary>
        /// <param name="statuses">Return status(es) to filter on.</param>
        /// <param name="reasons">Return reason(s) to filter on.</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive.</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetDeclaredByChannelAsync(System.Collections.Generic.IEnumerable<ReturnStatus> statuses, System.Collections.Generic.IEnumerable<ReturnReason> reasons, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, bool? isAcknowledged, int? page, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, FulfillmentType? fulfillmentType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ReturnDeclareForMerchantAsync(MerchantReturnRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ReturnDeclareForMerchantAsync(MerchantReturnRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Returns.</summary>
        /// <param name="creatorType">Filter on the return's creator. Default is MIXED.</param>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order.</param>
        /// <param name="statuses">Return status(es) to filter on.</param>
        /// <param name="reasons">Return reason(s) to filter on.</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive.</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetReturnsAsync(CreatorFilter? creatorType, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, FulfillmentType? fulfillmentType, System.Collections.Generic.IEnumerable<ReturnStatus> statuses, System.Collections.Generic.IEnumerable<ReturnReason> reasons, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, bool? isAcknowledged, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Returns.</summary>
        /// <param name="creatorType">Filter on the return's creator. Default is MIXED.</param>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order.</param>
        /// <param name="statuses">Return status(es) to filter on.</param>
        /// <param name="reasons">Return reason(s) to filter on.</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive.</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetReturnsAsync(CreatorFilter? creatorType, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, FulfillmentType? fulfillmentType, System.Collections.Generic.IEnumerable<ReturnStatus> statuses, System.Collections.Generic.IEnumerable<ReturnReason> reasons, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, bool? isAcknowledged, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Mark a return as received.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ReturnUpdateForMerchantAsync(MerchantReturnUpdateRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Mark a return as received.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ReturnUpdateForMerchantAsync(MerchantReturnUpdateRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Unhandled Returns.</summary>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetUnhandledAsync(System.Collections.Generic.IEnumerable<int> channelIds, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Unhandled Returns.</summary>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetUnhandledAsync(System.Collections.Generic.IEnumerable<int> channelIds, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantSingleOrderReturnResponse> ReturnGetByMerchantOrderNoAsync(string merchantOrderNo);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantSingleOrderReturnResponse> ReturnGetByMerchantOrderNoAsync(string merchantOrderNo, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Acknowledge Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ReturnAcknowledgeAsync(MerchantReturnAcknowledgeRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Acknowledge Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ReturnAcknowledgeAsync(MerchantReturnAcknowledgeRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get settings.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfMerchantSettingsResponse> SettingsGetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get settings.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleOfMerchantSettingsResponse> SettingsGetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Shipments</summary>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant.</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant.</param>
        /// <param name="method">Filter on the shipping method.</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive.</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive.</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive.</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment.</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel.</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantShipmentResponse> ShipmentIndexAsync(System.Collections.Generic.IEnumerable<string> merchantShipmentNos, System.Collections.Generic.IEnumerable<string> merchantOrderNos, string method, System.Collections.Generic.IEnumerable<string> shippedFromCountryCodes, System.DateTimeOffset? fromShipmentDate, System.DateTimeOffset? toShipmentDate, System.DateTimeOffset? fromCreateDate, System.DateTimeOffset? toCreateDate, System.DateTimeOffset? fromUpdateDate, System.DateTimeOffset? toUpdateDate, ShipmentFulfillmentType? fulfillmentType, System.Collections.Generic.IEnumerable<string> channelShipmentNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, int? page);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Shipments</summary>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant.</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant.</param>
        /// <param name="method">Filter on the shipping method.</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive.</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive.</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive.</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment.</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel.</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantShipmentResponse> ShipmentIndexAsync(System.Collections.Generic.IEnumerable<string> merchantShipmentNos, System.Collections.Generic.IEnumerable<string> merchantOrderNos, string method, System.Collections.Generic.IEnumerable<string> shippedFromCountryCodes, System.DateTimeOffset? fromShipmentDate, System.DateTimeOffset? toShipmentDate, System.DateTimeOffset? fromCreateDate, System.DateTimeOffset? toCreateDate, System.DateTimeOffset? fromUpdateDate, System.DateTimeOffset? toUpdateDate, ShipmentFulfillmentType? fulfillmentType, System.Collections.Generic.IEnumerable<string> channelShipmentNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, int? page, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create Shipment.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ShipmentCreateAsync(MerchantShipmentRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Shipment.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ShipmentCreateAsync(MerchantShipmentRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update Shipment.</summary>
        /// <param name="merchantShipmentNo">The merchant's shipment reference.</param>
        /// <param name="body">The updated tracking information.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ShipmentUpdateAsync(string merchantShipmentNo, MerchantShipmentTrackingRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Shipment.</summary>
        /// <param name="merchantShipmentNo">The merchant's shipment reference.</param>
        /// <param name="body">The updated tracking information.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ShipmentUpdateAsync(string merchantShipmentNo, MerchantShipmentTrackingRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get carriers for channel provided shipping labels</summary>
        /// <param name="merchantOrderNo">The merchant's order reference.</param>
        /// <param name="body">The parcel information</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantShipmentLabelCarrierResponse> ShipmentGetShipmentLabelCarriersAsync(string merchantOrderNo, MerchantShipmentLabelCarrierRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get carriers for channel provided shipping labels</summary>
        /// <param name="merchantOrderNo">The merchant's order reference.</param>
        /// <param name="body">The parcel information</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantShipmentLabelCarrierResponse> ShipmentGetShipmentLabelCarriersAsync(string merchantOrderNo, MerchantShipmentLabelCarrierRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create shipment for channel provided shipping labels</summary>
        /// <param name="body">The shipment to create</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ShipmentCreateForChannelMethodAsync(MerchantChannelLabelShipmentRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create shipment for channel provided shipping labels</summary>
        /// <param name="body">The shipment to create</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> ShipmentCreateForChannelMethodAsync(MerchantChannelLabelShipmentRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Download shipping label.</summary>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <returns>shippingLabel</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ShipmentShippingLabelAsync(string merchantShipmentNo);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download shipping label.</summary>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <returns>shippingLabel</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ShipmentShippingLabelAsync(string merchantShipmentNo, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the stock locations (or virtual warehouses).</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantStockLocationResponse> StockLocationIndexAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the stock locations (or virtual warehouses).</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantStockLocationResponse> StockLocationIndexAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> StockLocationCreateAsync(MerchantStockLocationCreateRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> StockLocationCreateAsync(MerchantStockLocationCreateRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Webhooks.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantWebhookResponse> WebhooksGetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Webhooks.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionOfMerchantWebhookResponse> WebhooksGetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create Webhook.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> WebhooksCreateAsync(MerchantWebhookRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Webhook.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> WebhooksCreateAsync(MerchantWebhookRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update Webhook.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> WebhooksUpdateAsync(MerchantWebhookRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Webhook.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> WebhooksUpdateAsync(MerchantWebhookRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete Webhook.</summary>
        /// <param name="webhookName">The unique name of a webhook you want to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> WebhooksDeleteAsync(string webhookName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Webhook.</summary>
        /// <param name="webhookName">The unique name of a webhook you want to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponse> WebhooksDeleteAsync(string webhookName, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChannelEngineApiClient : IChannelEngineApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ChannelEngineApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get Cancellations.</summary>
        /// <param name="createdSince">Filter on the create date of the cancellation in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantCancellationResponse> CancellationGetForMerchantAsync(System.DateTimeOffset? createdSince, int? page)
        {
            return CancellationGetForMerchantAsync(createdSince, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Cancellations.</summary>
        /// <param name="createdSince">Filter on the create date of the cancellation in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantCancellationResponse> CancellationGetForMerchantAsync(System.DateTimeOffset? createdSince, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/cancellations/merchant?");
            if (createdSince != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdSince") + "=").Append(System.Uri.EscapeDataString(createdSince.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantCancellationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantCancellationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create Cancellation.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> CancellationCreateAsync(MerchantCancellationRequest body)
        {
            return CancellationCreateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Cancellation.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> CancellationCreateAsync(MerchantCancellationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/cancellations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Channels.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfChannelGlobalChannelResponse> Channel_PluginsGetAsync()
        {
            return Channel_PluginsGetAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Channels.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfChannelGlobalChannelResponse> Channel_PluginsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/channels");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfChannelGlobalChannelResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfChannelGlobalChannelResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the BuyBox winner prices</summary>
        /// <param name="channelId">The id of the channel</param>
        /// <param name="gtinList">Search products by submitting a list of GTIN's. (optional)&lt;br /&gt;Max. 2000.</param>
        /// <param name="skuList">Search products by submitting a list of Sku's. (optional)&lt;br /&gt;Max. 2000. If GtinList is already set, this one is ignored.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantProductWithBuyBoxPrice> CompetitionPricesGetBuyBoxPricesAsync(int? channelId, System.Collections.Generic.IEnumerable<string> gtinList, System.Collections.Generic.IEnumerable<string> skuList, int? page)
        {
            return CompetitionPricesGetBuyBoxPricesAsync(channelId, gtinList, skuList, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the BuyBox winner prices</summary>
        /// <param name="channelId">The id of the channel</param>
        /// <param name="gtinList">Search products by submitting a list of GTIN's. (optional)&lt;br /&gt;Max. 2000.</param>
        /// <param name="skuList">Search products by submitting a list of Sku's. (optional)&lt;br /&gt;Max. 2000. If GtinList is already set, this one is ignored.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantProductWithBuyBoxPrice> CompetitionPricesGetBuyBoxPricesAsync(int? channelId, System.Collections.Generic.IEnumerable<string> gtinList, System.Collections.Generic.IEnumerable<string> skuList, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/competitionprices/buyboxprices?");
            if (channelId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("channelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(channelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gtinList != null) 
            {
                foreach (var item_ in gtinList) { urlBuilder_.Append(System.Uri.EscapeDataString("gtinList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (skuList != null) 
            {
                foreach (var item_ in skuList) { urlBuilder_.Append(System.Uri.EscapeDataString("skuList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantProductWithBuyBoxPrice>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantProductWithBuyBoxPrice);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Listed Products</summary>
        /// <param name="channelId">The id of a channel</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfChannelListedProductResponse> Listed_ProductGetByFilterAsync(int channelId, int? page)
        {
            return Listed_ProductGetByFilterAsync(channelId, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Listed Products</summary>
        /// <param name="channelId">The id of a channel</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfChannelListedProductResponse> Listed_ProductGetByFilterAsync(int channelId, int? page, System.Threading.CancellationToken cancellationToken)
        {
            if (channelId == null)
                throw new System.ArgumentNullException("channelId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/channels/{channelId}/products?");
            urlBuilder_.Replace("{channelId}", System.Uri.EscapeDataString(ConvertToString(channelId, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfChannelListedProductResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfChannelListedProductResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Notifications.</summary>
        /// <param name="fromDate">Filter on the notification date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the notification date, until this date. This date is exclusive.</param>
        /// <param name="types">Notification type(s) to filter on.</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="merchantReturnNos">Filter on unique return reference used by the merchant.</param>
        /// <param name="channelReturnNos">Filter on unique return reference used by the channel.</param>
        /// <param name="merchantShipmentNos">Filter on unique shipment reference used by the merchant.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantNotificationResponse> NotificationIndexAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, System.Collections.Generic.IEnumerable<NotificationType> types, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, System.Collections.Generic.IEnumerable<string> merchantReturnNos, System.Collections.Generic.IEnumerable<string> channelReturnNos, System.Collections.Generic.IEnumerable<string> merchantShipmentNos, int? page)
        {
            return NotificationIndexAsync(fromDate, toDate, types, merchantOrderNos, channelOrderNos, merchantReturnNos, channelReturnNos, merchantShipmentNos, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Notifications.</summary>
        /// <param name="fromDate">Filter on the notification date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the notification date, until this date. This date is exclusive.</param>
        /// <param name="types">Notification type(s) to filter on.</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="merchantReturnNos">Filter on unique return reference used by the merchant.</param>
        /// <param name="channelReturnNos">Filter on unique return reference used by the channel.</param>
        /// <param name="merchantShipmentNos">Filter on unique shipment reference used by the merchant.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantNotificationResponse> NotificationIndexAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, System.Collections.Generic.IEnumerable<NotificationType> types, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, System.Collections.Generic.IEnumerable<string> merchantReturnNos, System.Collections.Generic.IEnumerable<string> channelReturnNos, System.Collections.Generic.IEnumerable<string> merchantShipmentNos, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/notifications?");
            if (fromDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (types != null) 
            {
                foreach (var item_ in types) { urlBuilder_.Append(System.Uri.EscapeDataString("types") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (merchantOrderNos != null) 
            {
                foreach (var item_ in merchantOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (channelOrderNos != null) 
            {
                foreach (var item_ in channelOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("channelOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (merchantReturnNos != null) 
            {
                foreach (var item_ in merchantReturnNos) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantReturnNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (channelReturnNos != null) 
            {
                foreach (var item_ in channelReturnNos) { urlBuilder_.Append(System.Uri.EscapeDataString("channelReturnNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (merchantShipmentNos != null) 
            {
                foreach (var item_ in merchantShipmentNos) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantShipmentNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantNotificationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantNotificationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update stock and/or price.</summary>
        /// <param name="body">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockPriceUpdateAsync(System.Collections.Generic.IEnumerable<MerchantStockPriceUpdateRequest> body)
        {
            return OfferStockPriceUpdateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update stock and/or price.</summary>
        /// <param name="body">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockPriceUpdateAsync(System.Collections.Generic.IEnumerable<MerchantStockPriceUpdateRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/offer");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleOfDictionaryOfStringAndListOfString>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SingleOfDictionaryOfStringAndListOfString);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update only stock.</summary>
        /// <param name="body">References to the new values for the stock fields</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockUpdateAsync(System.Collections.Generic.IEnumerable<MerchantOfferStockUpdateRequest> body)
        {
            return OfferStockUpdateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update only stock.</summary>
        /// <param name="body">References to the new values for the stock fields</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockUpdateAsync(System.Collections.Generic.IEnumerable<MerchantOfferStockUpdateRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/offer/stock");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleOfDictionaryOfStringAndListOfString>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SingleOfDictionaryOfStringAndListOfString);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get stock for products.</summary>
        /// <param name="skus">List of your products' sku's.</param>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0)</param>
        /// <param name="pageSize">Number of items to return (default 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantOfferGetStockResponse> OfferGetStockAsync(System.Collections.Generic.IEnumerable<string> skus, System.Collections.Generic.IEnumerable<int> stockLocationIds, int? pageIndex, int? pageSize)
        {
            return OfferGetStockAsync(skus, stockLocationIds, pageIndex, pageSize, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get stock for products.</summary>
        /// <param name="skus">List of your products' sku's.</param>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0)</param>
        /// <param name="pageSize">Number of items to return (default 100)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantOfferGetStockResponse> OfferGetStockAsync(System.Collections.Generic.IEnumerable<string> skus, System.Collections.Generic.IEnumerable<int> stockLocationIds, int? pageIndex, int? pageSize, System.Threading.CancellationToken cancellationToken)
        {
            if (stockLocationIds == null)
                throw new System.ArgumentNullException("stockLocationIds");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/offer/stock?");
            if (skus != null) 
            {
                foreach (var item_ in skus) { urlBuilder_.Append(System.Uri.EscapeDataString("skus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            foreach (var item_ in stockLocationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("stockLocationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantOfferGetStockResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantOfferGetStockResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Orders By Filter.</summary>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on.</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel.</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel.</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.</param>
        /// <param name="toCreatedAtDate">Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.</param>
        /// <param name="channelIds">Filter orders on channel(s).</param>
        /// <param name="stockLocationIds">Filter on stock locations</param>
        /// <param name="isAcknowledged">Filter on acknowledged value</param>
        /// <param name="fromUpdatedAtDate">Filter on the order update date, starting from this date. This date is inclusive.</param>
        /// <param name="toUpdatedAtDate">Filter on the order update date, unitl this date. This date is exclusive.</param>
        /// <param name="fromAcknowledgedDate">Filter on the order acknowledged date, starting from this date. This date is inclusive.</param>
        /// <param name="toAcknowledgedDate">Filter on the order acknowledged date, unitl this date. This date is exclusive.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetByFilterAsync(System.Collections.Generic.IEnumerable<OrderStatusView> statuses, System.Collections.Generic.IEnumerable<string> emailAddresses, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, System.DateTimeOffset? fromCreatedAtDate, System.DateTimeOffset? toCreatedAtDate, bool? excludeMarketplaceFulfilledOrdersAndLines, FulfillmentType? fulfillmentType, bool? onlyWithCancellationRequests, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<int> stockLocationIds, bool? isAcknowledged, System.DateTimeOffset? fromUpdatedAtDate, System.DateTimeOffset? toUpdatedAtDate, System.DateTimeOffset? fromAcknowledgedDate, System.DateTimeOffset? toAcknowledgedDate, int? page)
        {
            return OrderGetByFilterAsync(statuses, emailAddresses, merchantOrderNos, channelOrderNos, fromDate, toDate, fromCreatedAtDate, toCreatedAtDate, excludeMarketplaceFulfilledOrdersAndLines, fulfillmentType, onlyWithCancellationRequests, channelIds, stockLocationIds, isAcknowledged, fromUpdatedAtDate, toUpdatedAtDate, fromAcknowledgedDate, toAcknowledgedDate, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Orders By Filter.</summary>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on.</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel.</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel.</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.</param>
        /// <param name="toCreatedAtDate">Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.</param>
        /// <param name="channelIds">Filter orders on channel(s).</param>
        /// <param name="stockLocationIds">Filter on stock locations</param>
        /// <param name="isAcknowledged">Filter on acknowledged value</param>
        /// <param name="fromUpdatedAtDate">Filter on the order update date, starting from this date. This date is inclusive.</param>
        /// <param name="toUpdatedAtDate">Filter on the order update date, unitl this date. This date is exclusive.</param>
        /// <param name="fromAcknowledgedDate">Filter on the order acknowledged date, starting from this date. This date is inclusive.</param>
        /// <param name="toAcknowledgedDate">Filter on the order acknowledged date, unitl this date. This date is exclusive.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetByFilterAsync(System.Collections.Generic.IEnumerable<OrderStatusView> statuses, System.Collections.Generic.IEnumerable<string> emailAddresses, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, System.DateTimeOffset? fromCreatedAtDate, System.DateTimeOffset? toCreatedAtDate, bool? excludeMarketplaceFulfilledOrdersAndLines, FulfillmentType? fulfillmentType, bool? onlyWithCancellationRequests, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<int> stockLocationIds, bool? isAcknowledged, System.DateTimeOffset? fromUpdatedAtDate, System.DateTimeOffset? toUpdatedAtDate, System.DateTimeOffset? fromAcknowledgedDate, System.DateTimeOffset? toAcknowledgedDate, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/orders?");
            if (statuses != null) 
            {
                foreach (var item_ in statuses) { urlBuilder_.Append(System.Uri.EscapeDataString("statuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (emailAddresses != null) 
            {
                foreach (var item_ in emailAddresses) { urlBuilder_.Append(System.Uri.EscapeDataString("emailAddresses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (merchantOrderNos != null) 
            {
                foreach (var item_ in merchantOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (channelOrderNos != null) 
            {
                foreach (var item_ in channelOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("channelOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fromDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromCreatedAtDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromCreatedAtDate") + "=").Append(System.Uri.EscapeDataString(fromCreatedAtDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toCreatedAtDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toCreatedAtDate") + "=").Append(System.Uri.EscapeDataString(toCreatedAtDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeMarketplaceFulfilledOrdersAndLines != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeMarketplaceFulfilledOrdersAndLines") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeMarketplaceFulfilledOrdersAndLines, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fulfillmentType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fulfillmentType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fulfillmentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyWithCancellationRequests != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("onlyWithCancellationRequests") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyWithCancellationRequests, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channelIds != null) 
            {
                foreach (var item_ in channelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("channelIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stockLocationIds != null) 
            {
                foreach (var item_ in stockLocationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("stockLocationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (isAcknowledged != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isAcknowledged") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isAcknowledged, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromUpdatedAtDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromUpdatedAtDate") + "=").Append(System.Uri.EscapeDataString(fromUpdatedAtDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toUpdatedAtDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toUpdatedAtDate") + "=").Append(System.Uri.EscapeDataString(toUpdatedAtDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromAcknowledgedDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromAcknowledgedDate") + "=").Append(System.Uri.EscapeDataString(fromAcknowledgedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toAcknowledgedDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toAcknowledgedDate") + "=").Append(System.Uri.EscapeDataString(toAcknowledgedDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantOrderResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantOrderResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get New Orders.</summary>
        /// <param name="stockLocationId">The ChannelEngine id of the stock location.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetNewAsync(int? stockLocationId)
        {
            return OrderGetNewAsync(stockLocationId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get New Orders.</summary>
        /// <param name="stockLocationId">The ChannelEngine id of the stock location.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetNewAsync(int? stockLocationId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/orders/new?");
            if (stockLocationId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stockLocationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stockLocationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantOrderResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantOrderResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Acknowledge Order.</summary>
        /// <param name="body">Relations between the id's returned by ChannelEngine and the references which the merchant uses.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> OrderAcknowledgeAsync(MerchantOrderAcknowledgementRequest body)
        {
            return OrderAcknowledgeAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Acknowledge Order.</summary>
        /// <param name="body">Relations between the id's returned by ChannelEngine and the references which the merchant uses.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> OrderAcknowledgeAsync(MerchantOrderAcknowledgementRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/orders/acknowledge");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Download Invoice.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address' country's language.</param>
        /// <returns>Invoice PDF</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> OrderInvoiceAsync(string merchantOrderNo, bool? useCustomerCulture)
        {
            return OrderInvoiceAsync(merchantOrderNo, useCustomerCulture, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download Invoice.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address' country's language.</param>
        /// <returns>Invoice PDF</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> OrderInvoiceAsync(string merchantOrderNo, bool? useCustomerCulture, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantOrderNo == null)
                throw new System.ArgumentNullException("merchantOrderNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/orders/{merchantOrderNo}/invoice?");
            urlBuilder_.Replace("{merchantOrderNo}", System.Uri.EscapeDataString(ConvertToString(merchantOrderNo, System.Globalization.CultureInfo.InvariantCulture)));
            if (useCustomerCulture != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("useCustomerCulture") + "=").Append(System.Uri.EscapeDataString(ConvertToString(useCustomerCulture, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/pdf"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206") 
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_); 
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Upload Invoice.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> OrderUploadInvoiceAsync(string merchantOrderNo, System.IO.Stream body)
        {
            return OrderUploadInvoiceAsync(merchantOrderNo, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload Invoice.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> OrderUploadInvoiceAsync(string merchantOrderNo, System.IO.Stream body, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantOrderNo == null)
                throw new System.ArgumentNullException("merchantOrderNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/orders/{merchantOrderNo}/invoice");
            urlBuilder_.Replace("{merchantOrderNo}", System.Uri.EscapeDataString(ConvertToString(merchantOrderNo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("multipart/form-data");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Download Packing Slip.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address' country's language.</param>
        /// <returns>Packing Slip PDF</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> OrderPackingSlipAsync(string merchantOrderNo, bool? useCustomerCulture)
        {
            return OrderPackingSlipAsync(merchantOrderNo, useCustomerCulture, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download Packing Slip.</summary>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address' country's language.</param>
        /// <returns>Packing Slip PDF</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> OrderPackingSlipAsync(string merchantOrderNo, bool? useCustomerCulture, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantOrderNo == null)
                throw new System.ArgumentNullException("merchantOrderNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/orders/{merchantOrderNo}/packingslip?");
            urlBuilder_.Replace("{merchantOrderNo}", System.Uri.EscapeDataString(ConvertToString(merchantOrderNo, System.Globalization.CultureInfo.InvariantCulture)));
            if (useCustomerCulture != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("useCustomerCulture") + "=").Append(System.Uri.EscapeDataString(ConvertToString(useCustomerCulture, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/pdf"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206") 
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_); 
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update Comment.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> OrderUpdateAsync(MerchantOrderCommentUpdateRequest body)
        {
            return OrderUpdateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Comment.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> OrderUpdateAsync(MerchantOrderCommentUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/orders/comment");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Upsert Products.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductCreateAsync(bool? ignoreStock, System.Collections.Generic.IEnumerable<MerchantProductRequest> body)
        {
            return ProductCreateAsync(ignoreStock, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upsert Products.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductCreateAsync(bool? ignoreStock, System.Collections.Generic.IEnumerable<MerchantProductRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/products?");
            if (ignoreStock != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ignoreStock") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ignoreStock, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleOfProductCreationResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SingleOfProductCreationResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Products.</summary>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters.</param>
        /// <param name="eanList">Search products by submitting a list of EAN's.</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo's.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantProductResponse> ProductGetByFilterAsync(string search, System.Collections.Generic.IEnumerable<string> eanList, System.Collections.Generic.IEnumerable<string> merchantProductNoList, int? page)
        {
            return ProductGetByFilterAsync(search, eanList, merchantProductNoList, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Products.</summary>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters.</param>
        /// <param name="eanList">Search products by submitting a list of EAN's.</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo's.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantProductResponse> ProductGetByFilterAsync(string search, System.Collections.Generic.IEnumerable<string> eanList, System.Collections.Generic.IEnumerable<string> merchantProductNoList, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/products?");
            if (search != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (eanList != null) 
            {
                foreach (var item_ in eanList) { urlBuilder_.Append(System.Uri.EscapeDataString("eanList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (merchantProductNoList != null) 
            {
                foreach (var item_ in merchantProductNoList) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantProductNoList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantProductResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantProductResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Bulk Patch Products</summary>
        /// <param name="body">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductBulkPatchAsync(PatchMerchantProductDto body)
        {
            return ProductBulkPatchAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Bulk Patch Products</summary>
        /// <param name="body">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductBulkPatchAsync(PatchMerchantProductDto body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/products");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleOfProductCreationResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SingleOfProductCreationResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Delete Product.</summary>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> ProductDeleteAsync(string merchantProductNo)
        {
            return ProductDeleteAsync(merchantProductNo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Product.</summary>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> ProductDeleteAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantProductNo == null)
                throw new System.ArgumentNullException("merchantProductNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/products/{merchantProductNo}");
            urlBuilder_.Replace("{merchantProductNo}", System.Uri.EscapeDataString(ConvertToString(merchantProductNo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Product.</summary>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleOfMerchantProductResponse> ProductGetByMerchantProductNoAsync(string merchantProductNo)
        {
            return ProductGetByMerchantProductNoAsync(merchantProductNo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Product.</summary>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SingleOfMerchantProductResponse> ProductGetByMerchantProductNoAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantProductNo == null)
                throw new System.ArgumentNullException("merchantProductNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/products/{merchantProductNo}");
            urlBuilder_.Replace("{merchantProductNo}", System.Uri.EscapeDataString(ConvertToString(merchantProductNo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleOfMerchantProductResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleOfMerchantProductResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<SingleOfMerchantProductResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SingleOfMerchantProductResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Patch product</summary>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="body">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you're updating (used with operations "add" and "replace").&lt;br /&gt; Path contains the path to the property you're updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform ("add","replace","remove").&lt;br /&gt; From is only used when using the "move" operation. It refers to the source path of the value to be moved.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductPatchAsync(string merchantProductNo, System.Collections.Generic.IEnumerable<Operation> body)
        {
            return ProductPatchAsync(merchantProductNo, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Patch product</summary>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="body">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you're updating (used with operations "add" and "replace").&lt;br /&gt; Path contains the path to the property you're updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform ("add","replace","remove").&lt;br /&gt; From is only used when using the "move" operation. It refers to the source path of the value to be moved.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductPatchAsync(string merchantProductNo, System.Collections.Generic.IEnumerable<Operation> body, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantProductNo == null)
                throw new System.ArgumentNullException("merchantProductNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/products/{merchantProductNo}");
            urlBuilder_.Replace("{merchantProductNo}", System.Uri.EscapeDataString(ConvertToString(merchantProductNo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleOfProductCreationResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SingleOfProductCreationResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Delete multiple Products.</summary>
        /// <param name="body">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> ProductBulkDeleteAsync(System.Collections.Generic.IEnumerable<string> body)
        {
            return ProductBulkDeleteAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete multiple Products.</summary>
        /// <param name="body">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> ProductBulkDeleteAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/products/bulkdelete");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get product bundles.</summary>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters.</param>
        /// <param name="eanList">Search products by submitting a list of EAN's.</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo's.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantProductBundleResponse> ProductBundleGetByFilterAsync(string search, System.Collections.Generic.IEnumerable<string> eanList, System.Collections.Generic.IEnumerable<string> merchantProductNoList, int? page)
        {
            return ProductBundleGetByFilterAsync(search, eanList, merchantProductNoList, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get product bundles.</summary>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters.</param>
        /// <param name="eanList">Search products by submitting a list of EAN's.</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo's.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantProductBundleResponse> ProductBundleGetByFilterAsync(string search, System.Collections.Generic.IEnumerable<string> eanList, System.Collections.Generic.IEnumerable<string> merchantProductNoList, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/productbundles?");
            if (search != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (eanList != null) 
            {
                foreach (var item_ in eanList) { urlBuilder_.Append(System.Uri.EscapeDataString("eanList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (merchantProductNoList != null) 
            {
                foreach (var item_ in merchantProductNoList) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantProductNoList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantProductBundleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantProductBundleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Returns.</summary>
        /// <param name="statuses">Return status(es) to filter on.</param>
        /// <param name="reasons">Return reason(s) to filter on.</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive.</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetDeclaredByChannelAsync(System.Collections.Generic.IEnumerable<ReturnStatus> statuses, System.Collections.Generic.IEnumerable<ReturnReason> reasons, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, bool? isAcknowledged, int? page, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, FulfillmentType? fulfillmentType)
        {
            return ReturnGetDeclaredByChannelAsync(statuses, reasons, fromDate, toDate, isAcknowledged, page, channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Returns.</summary>
        /// <param name="statuses">Return status(es) to filter on.</param>
        /// <param name="reasons">Return reason(s) to filter on.</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive.</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetDeclaredByChannelAsync(System.Collections.Generic.IEnumerable<ReturnStatus> statuses, System.Collections.Generic.IEnumerable<ReturnReason> reasons, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, bool? isAcknowledged, int? page, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, FulfillmentType? fulfillmentType, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/returns/merchant?");
            if (statuses != null) 
            {
                foreach (var item_ in statuses) { urlBuilder_.Append(System.Uri.EscapeDataString("statuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (reasons != null) 
            {
                foreach (var item_ in reasons) { urlBuilder_.Append(System.Uri.EscapeDataString("reasons") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fromDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isAcknowledged != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isAcknowledged") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isAcknowledged, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channelIds != null) 
            {
                foreach (var item_ in channelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("channelIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (merchantOrderNos != null) 
            {
                foreach (var item_ in merchantOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (channelOrderNos != null) 
            {
                foreach (var item_ in channelOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("channelOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fulfillmentType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fulfillmentType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fulfillmentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantReturnResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantReturnResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> ReturnDeclareForMerchantAsync(MerchantReturnRequest body)
        {
            return ReturnDeclareForMerchantAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> ReturnDeclareForMerchantAsync(MerchantReturnRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/returns/merchant");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Returns.</summary>
        /// <param name="creatorType">Filter on the return's creator. Default is MIXED.</param>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order.</param>
        /// <param name="statuses">Return status(es) to filter on.</param>
        /// <param name="reasons">Return reason(s) to filter on.</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive.</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetReturnsAsync(CreatorFilter? creatorType, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, FulfillmentType? fulfillmentType, System.Collections.Generic.IEnumerable<ReturnStatus> statuses, System.Collections.Generic.IEnumerable<ReturnReason> reasons, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, bool? isAcknowledged, int? page)
        {
            return ReturnGetReturnsAsync(creatorType, channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, isAcknowledged, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Returns.</summary>
        /// <param name="creatorType">Filter on the return's creator. Default is MIXED.</param>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant.</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order.</param>
        /// <param name="statuses">Return status(es) to filter on.</param>
        /// <param name="reasons">Return reason(s) to filter on.</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive.</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive.</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetReturnsAsync(CreatorFilter? creatorType, System.Collections.Generic.IEnumerable<int> channelIds, System.Collections.Generic.IEnumerable<string> merchantOrderNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, FulfillmentType? fulfillmentType, System.Collections.Generic.IEnumerable<ReturnStatus> statuses, System.Collections.Generic.IEnumerable<ReturnReason> reasons, System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, bool? isAcknowledged, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/returns?");
            if (creatorType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("creatorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(creatorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channelIds != null) 
            {
                foreach (var item_ in channelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("channelIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (merchantOrderNos != null) 
            {
                foreach (var item_ in merchantOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (channelOrderNos != null) 
            {
                foreach (var item_ in channelOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("channelOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fulfillmentType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fulfillmentType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fulfillmentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (statuses != null) 
            {
                foreach (var item_ in statuses) { urlBuilder_.Append(System.Uri.EscapeDataString("statuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (reasons != null) 
            {
                foreach (var item_ in reasons) { urlBuilder_.Append(System.Uri.EscapeDataString("reasons") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fromDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toDate") + "=").Append(System.Uri.EscapeDataString(toDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isAcknowledged != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isAcknowledged") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isAcknowledged, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantReturnResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantReturnResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Mark a return as received.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> ReturnUpdateForMerchantAsync(MerchantReturnUpdateRequest body)
        {
            return ReturnUpdateForMerchantAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Mark a return as received.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> ReturnUpdateForMerchantAsync(MerchantReturnUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/returns");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Unhandled Returns.</summary>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetUnhandledAsync(System.Collections.Generic.IEnumerable<int> channelIds, int? page)
        {
            return ReturnGetUnhandledAsync(channelIds, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Unhandled Returns.</summary>
        /// <param name="channelIds">Filter on Channel IDs</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetUnhandledAsync(System.Collections.Generic.IEnumerable<int> channelIds, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/returns/merchant/new?");
            if (channelIds != null) 
            {
                foreach (var item_ in channelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("channelIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantReturnResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantReturnResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantSingleOrderReturnResponse> ReturnGetByMerchantOrderNoAsync(string merchantOrderNo)
        {
            return ReturnGetByMerchantOrderNoAsync(merchantOrderNo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantSingleOrderReturnResponse> ReturnGetByMerchantOrderNoAsync(string merchantOrderNo, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantOrderNo == null)
                throw new System.ArgumentNullException("merchantOrderNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/returns/merchant/{merchantOrderNo}");
            urlBuilder_.Replace("{merchantOrderNo}", System.Uri.EscapeDataString(ConvertToString(merchantOrderNo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantSingleOrderReturnResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantSingleOrderReturnResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Acknowledge Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> ReturnAcknowledgeAsync(MerchantReturnAcknowledgeRequest body)
        {
            return ReturnAcknowledgeAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Acknowledge Return.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> ReturnAcknowledgeAsync(MerchantReturnAcknowledgeRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/returns/merchant/acknowledge");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get settings.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleOfMerchantSettingsResponse> SettingsGetAsync()
        {
            return SettingsGetAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get settings.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SingleOfMerchantSettingsResponse> SettingsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/settings");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleOfMerchantSettingsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SingleOfMerchantSettingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Shipments</summary>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant.</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant.</param>
        /// <param name="method">Filter on the shipping method.</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive.</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive.</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive.</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment.</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel.</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantShipmentResponse> ShipmentIndexAsync(System.Collections.Generic.IEnumerable<string> merchantShipmentNos, System.Collections.Generic.IEnumerable<string> merchantOrderNos, string method, System.Collections.Generic.IEnumerable<string> shippedFromCountryCodes, System.DateTimeOffset? fromShipmentDate, System.DateTimeOffset? toShipmentDate, System.DateTimeOffset? fromCreateDate, System.DateTimeOffset? toCreateDate, System.DateTimeOffset? fromUpdateDate, System.DateTimeOffset? toUpdateDate, ShipmentFulfillmentType? fulfillmentType, System.Collections.Generic.IEnumerable<string> channelShipmentNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, int? page)
        {
            return ShipmentIndexAsync(merchantShipmentNos, merchantOrderNos, method, shippedFromCountryCodes, fromShipmentDate, toShipmentDate, fromCreateDate, toCreateDate, fromUpdateDate, toUpdateDate, fulfillmentType, channelShipmentNos, channelOrderNos, page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Shipments</summary>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant.</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant.</param>
        /// <param name="method">Filter on the shipping method.</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive.</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive.</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive.</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive.</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive.</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment.</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel.</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel.</param>
        /// <param name="page">The page to filter on. Starts at 1.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantShipmentResponse> ShipmentIndexAsync(System.Collections.Generic.IEnumerable<string> merchantShipmentNos, System.Collections.Generic.IEnumerable<string> merchantOrderNos, string method, System.Collections.Generic.IEnumerable<string> shippedFromCountryCodes, System.DateTimeOffset? fromShipmentDate, System.DateTimeOffset? toShipmentDate, System.DateTimeOffset? fromCreateDate, System.DateTimeOffset? toCreateDate, System.DateTimeOffset? fromUpdateDate, System.DateTimeOffset? toUpdateDate, ShipmentFulfillmentType? fulfillmentType, System.Collections.Generic.IEnumerable<string> channelShipmentNos, System.Collections.Generic.IEnumerable<string> channelOrderNos, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/shipments/merchant?");
            if (merchantShipmentNos != null) 
            {
                foreach (var item_ in merchantShipmentNos) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantShipmentNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (merchantOrderNos != null) 
            {
                foreach (var item_ in merchantOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("merchantOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (method != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shippedFromCountryCodes != null) 
            {
                foreach (var item_ in shippedFromCountryCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("shippedFromCountryCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fromShipmentDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromShipmentDate") + "=").Append(System.Uri.EscapeDataString(fromShipmentDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toShipmentDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toShipmentDate") + "=").Append(System.Uri.EscapeDataString(toShipmentDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromCreateDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromCreateDate") + "=").Append(System.Uri.EscapeDataString(fromCreateDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toCreateDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toCreateDate") + "=").Append(System.Uri.EscapeDataString(toCreateDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromUpdateDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromUpdateDate") + "=").Append(System.Uri.EscapeDataString(fromUpdateDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toUpdateDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toUpdateDate") + "=").Append(System.Uri.EscapeDataString(toUpdateDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fulfillmentType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fulfillmentType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fulfillmentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (channelShipmentNos != null) 
            {
                foreach (var item_ in channelShipmentNos) { urlBuilder_.Append(System.Uri.EscapeDataString("channelShipmentNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (channelOrderNos != null) 
            {
                foreach (var item_ in channelOrderNos) { urlBuilder_.Append(System.Uri.EscapeDataString("channelOrderNos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantShipmentResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantShipmentResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create Shipment.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> ShipmentCreateAsync(MerchantShipmentRequest body)
        {
            return ShipmentCreateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Shipment.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> ShipmentCreateAsync(MerchantShipmentRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/shipments");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update Shipment.</summary>
        /// <param name="merchantShipmentNo">The merchant's shipment reference.</param>
        /// <param name="body">The updated tracking information.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> ShipmentUpdateAsync(string merchantShipmentNo, MerchantShipmentTrackingRequest body)
        {
            return ShipmentUpdateAsync(merchantShipmentNo, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Shipment.</summary>
        /// <param name="merchantShipmentNo">The merchant's shipment reference.</param>
        /// <param name="body">The updated tracking information.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> ShipmentUpdateAsync(string merchantShipmentNo, MerchantShipmentTrackingRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantShipmentNo == null)
                throw new System.ArgumentNullException("merchantShipmentNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/shipments/{merchantShipmentNo}");
            urlBuilder_.Replace("{merchantShipmentNo}", System.Uri.EscapeDataString(ConvertToString(merchantShipmentNo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get carriers for channel provided shipping labels</summary>
        /// <param name="merchantOrderNo">The merchant's order reference.</param>
        /// <param name="body">The parcel information</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantShipmentLabelCarrierResponse> ShipmentGetShipmentLabelCarriersAsync(string merchantOrderNo, MerchantShipmentLabelCarrierRequest body)
        {
            return ShipmentGetShipmentLabelCarriersAsync(merchantOrderNo, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get carriers for channel provided shipping labels</summary>
        /// <param name="merchantOrderNo">The merchant's order reference.</param>
        /// <param name="body">The parcel information</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantShipmentLabelCarrierResponse> ShipmentGetShipmentLabelCarriersAsync(string merchantOrderNo, MerchantShipmentLabelCarrierRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantOrderNo == null)
                throw new System.ArgumentNullException("merchantOrderNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/carriers/{merchantOrderNo}");
            urlBuilder_.Replace("{merchantOrderNo}", System.Uri.EscapeDataString(ConvertToString(merchantOrderNo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantShipmentLabelCarrierResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantShipmentLabelCarrierResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create shipment for channel provided shipping labels</summary>
        /// <param name="body">The shipment to create</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> ShipmentCreateForChannelMethodAsync(MerchantChannelLabelShipmentRequest body)
        {
            return ShipmentCreateForChannelMethodAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create shipment for channel provided shipping labels</summary>
        /// <param name="body">The shipment to create</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> ShipmentCreateForChannelMethodAsync(MerchantChannelLabelShipmentRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/shipments/channelmethod");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Download shipping label.</summary>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <returns>shippingLabel</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> ShipmentShippingLabelAsync(string merchantShipmentNo)
        {
            return ShipmentShippingLabelAsync(merchantShipmentNo, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Download shipping label.</summary>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <returns>shippingLabel</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> ShipmentShippingLabelAsync(string merchantShipmentNo, System.Threading.CancellationToken cancellationToken)
        {
            if (merchantShipmentNo == null)
                throw new System.ArgumentNullException("merchantShipmentNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/orders/{merchantShipmentNo}/shippinglabel");
            urlBuilder_.Replace("{merchantShipmentNo}", System.Uri.EscapeDataString(ConvertToString(merchantShipmentNo, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.shippingLabel"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206") 
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_); 
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the stock locations (or virtual warehouses).</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantStockLocationResponse> StockLocationIndexAsync()
        {
            return StockLocationIndexAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the stock locations (or virtual warehouses).</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantStockLocationResponse> StockLocationIndexAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/stocklocations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantStockLocationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantStockLocationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> StockLocationCreateAsync(MerchantStockLocationCreateRequest body)
        {
            return StockLocationCreateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> StockLocationCreateAsync(MerchantStockLocationCreateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/stocklocations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Webhooks.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CollectionOfMerchantWebhookResponse> WebhooksGetAllAsync()
        {
            return WebhooksGetAllAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Webhooks.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CollectionOfMerchantWebhookResponse> WebhooksGetAllAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/webhooks");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionOfMerchantWebhookResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CollectionOfMerchantWebhookResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create Webhook.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> WebhooksCreateAsync(MerchantWebhookRequest body)
        {
            return WebhooksCreateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Webhook.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> WebhooksCreateAsync(MerchantWebhookRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/webhooks");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update Webhook.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> WebhooksUpdateAsync(MerchantWebhookRequest body)
        {
            return WebhooksUpdateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Webhook.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> WebhooksUpdateAsync(MerchantWebhookRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/webhooks");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Delete Webhook.</summary>
        /// <param name="webhookName">The unique name of a webhook you want to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiResponse> WebhooksDeleteAsync(string webhookName)
        {
            return WebhooksDeleteAsync(webhookName, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Webhook.</summary>
        /// <param name="webhookName">The unique name of a webhook you want to delete.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiResponse> WebhooksDeleteAsync(string webhookName, System.Threading.CancellationToken cancellationToken)
        {
            if (webhookName == null)
                throw new System.ArgumentNullException("webhookName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v2/webhooks/{webhookName}");
            urlBuilder_.Replace("{webhookName}", System.Uri.EscapeDataString(ConvertToString(webhookName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ApiResponse>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdvanceSettingsResponse 
    {
        [Newtonsoft.Json.JsonProperty("ManageStock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ManageStock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisableAddressValidation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DisableAddressValidation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SkipHouseNumberValidation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SkipHouseNumberValidation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SkipHouseNumberValidationForCountryCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SkipHouseNumberValidationForCountryCodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SetOrdersToClosedOnImport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SetOrdersToClosedOnImport { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisableStockReservation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DisableStockReservation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisableAutoOrderCancellation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DisableAutoOrderCancellation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutomaticallySetPhoneNumberIfEmpty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutomaticallySetPhoneNumberIfEmpty { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultVatRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DefaultVatRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrderTooLongOnNewHoursOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OrderTooLongOnNewHoursOffset { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiResponse 
    {
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChannelCarrierCollectionMethodApi
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DROP_OFF")]
        DROP_OFF = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PICK_UP")]
        PICK_UP = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChannelCarrierRecommendationApi
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NEUTRAL")]
        NEUTRAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RECOMMENDED")]
        RECOMMENDED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DISCOMMENDED")]
        DISCOMMENDED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChannelChannelResponse 
    {
        /// <summary>The ID of the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChannelId { get; set; }
    
        /// <summary>A boolean value indicating whether the Channel is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }
    
        /// <summary>The name of the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChannelGlobalChannelResponse 
    {
        /// <summary>The country code of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>The ID of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GlobalChannelId { get; set; }
    
        /// <summary>The status of the instances.</summary>
        [Newtonsoft.Json.JsonProperty("Channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChannelChannelResponse> Channels { get; set; }
    
        /// <summary>The language code of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("LanguageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        /// <summary>The name of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalChannelName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChannelListedProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("ChannelStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListedProductChannelStatus ChannelStatus { get; set; }
    
        /// <summary>EAN</summary>
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExportStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListedProductExportStatus ExportStatus { get; set; }
    
        /// <summary>Your product number (SKU)</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Your product last exported price</summary>
        [Newtonsoft.Json.JsonProperty("LastExportedPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LastExportedPrice { get; set; }
    
        /// <summary>Your product last exported stock</summary>
        [Newtonsoft.Json.JsonProperty("LastExportedStock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LastExportedStock { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfChannelGlobalChannelResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChannelGlobalChannelResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfChannelListedProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChannelListedProductResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantCancellationResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantCancellationResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantNotificationResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantNotificationResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantOfferGetStockResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantOfferGetStockResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantOrderResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantOrderResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantProductBundleResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductBundleResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantProductWithBuyBoxPrice 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductWithBuyBoxPrice> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantReturnResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantReturnResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantShipmentLabelCarrierResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantShipmentLabelCarrierResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantShipmentResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantShipmentResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantSingleOrderReturnResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantSingleOrderReturnResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantStockLocationResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantStockLocationResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantWebhookResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantWebhookResponse> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Condition
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEW_REFURBISHED")]
        NEW_REFURBISHED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_AS_NEW")]
        USED_AS_NEW = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_GOOD")]
        USED_GOOD = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_REASONABLE")]
        USED_REASONABLE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_MEDIOCRE")]
        USED_MEDIOCRE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_VERY_GOOD")]
        USED_VERY_GOOD = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreatorFilter
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_FROM_MERCHANT")]
        ONLY_FROM_MERCHANT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_FROM_CHANNEL")]
        ONLY_FROM_CHANNEL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIXED")]
        MIXED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ExtraDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER")]
        NUMBER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"URL")]
        URL = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMAGEURL")]
        IMAGEURL = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FulfillmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_MERCHANT")]
        ONLY_MERCHANT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_CHANNEL")]
        ONLY_CHANNEL = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIXED")]
        MIXED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCLUDES_MERCHANT")]
        INCLUDES_MERCHANT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCLUDES_CHANNEL")]
        INCLUDES_CHANNEL = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Gender
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_APPLICABLE")]
        NOT_APPLICABLE = 2,
    
    }
    
    /// <summary>Array of operations to perform</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonPatchDocument : System.Collections.ObjectModel.Collection<Operation>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonPatchOperationOfMerchantProductRequest 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Op { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ListedProductChannelStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISHED")]
        PUBLISHED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_PUBLISHED")]
        NOT_PUBLISHED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER_REVIEW")]
        UNDER_REVIEW = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ON_CREATE")]
        INVALID_ON_CREATE = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ListedProductExportStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPDATED")]
        UPDATED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CREATE_FAILED")]
        CREATE_FAILED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MancoReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IN_STOCK")]
        NOT_IN_STOCK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGED")]
        DAMAGED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCOMPLETE")]
        INCOMPLETE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_CANCELLED")]
        CLIENT_CANCELLED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ADDRESS")]
        INVALID_ADDRESS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantAddressResponse 
    {
        /// <summary>The first address line, use this field if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line1 { get; set; }
    
        /// <summary>The second address line, use this field if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line2 { get; set; }
    
        /// <summary>The third address line, use this field if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Line3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gender Gender { get; set; }
    
        /// <summary>Optional. Company addressed too.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CompanyName { get; set; }
    
        /// <summary>The first name of the customer.</summary>
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FirstName { get; set; }
    
        /// <summary>The last name of the customer (includes the surname prefix [tussenvoegsel] like 'de', 'van', 'du').</summary>
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string LastName { get; set; }
    
        /// <summary>The name of the street (without house number information)
        /// This field might be empty if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string StreetName { get; set; }
    
        /// <summary>The house number
        /// This field might be empty if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("HouseNr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string HouseNr { get; set; }
    
        /// <summary>Optional. Addition to the house number
        /// If the address is: Groenhazengracht 2c, the address will be:
        /// StreetName: Groenhazengracht
        /// HouseNo: 2
        /// HouseNrAddition: c
        /// This field might be empty if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("HouseNrAddition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string HouseNrAddition { get; set; }
    
        /// <summary>The zip or postal code.</summary>
        [Newtonsoft.Json.JsonProperty("ZipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        /// <summary>The name of the city.</summary>
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string City { get; set; }
    
        /// <summary>Optional. State/province/region.</summary>
        [Newtonsoft.Json.JsonProperty("Region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Region { get; set; }
    
        /// <summary>For example: NL, BE, FR.</summary>
        [Newtonsoft.Json.JsonProperty("CountryIso", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryIso { get; set; }
    
        /// <summary>Optional. The address as a single string: use in case the address lines are entered
        /// as single lines and later parsed into street, house number and house number addition.</summary>
        [Newtonsoft.Json.JsonProperty("Original", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Original { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantCancellationLineRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Quantity of the product to cancel.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantCancellationLineResponse 
    {
        /// <summary>The unique product reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The unique product reference used by the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelProductNo { get; set; }
    
        /// <summary>Quantity of the product to cancel.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantCancellationRequest 
    {
        /// <summary>The unique cancellation reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantCancellationNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string MerchantCancellationNo { get; set; }
    
        /// <summary>The unique order reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<MerchantCancellationLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantCancellationLineRequest>();
    
        /// <summary>Reason for cancellation (text).</summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReasonCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MancoReason ReasonCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantCancellationResponse 
    {
        /// <summary>The unique cancellation reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantCancellationNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string MerchantCancellationNo { get; set; }
    
        /// <summary>The unique order reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The unique order reference used by the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MerchantCancellationLineResponse> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantCancellationLineResponse>();
    
        /// <summary>The date at which the cancellation was created in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>Reason for cancellation (text).</summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReasonCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MancoReason ReasonCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantChannelLabelShipmentRequest 
    {
        [Newtonsoft.Json.JsonProperty("Dimensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MerchantShipmentPackageDimensionsRequest Dimensions { get; set; } = new MerchantShipmentPackageDimensionsRequest();
    
        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MerchantShipmentPackageWeightRequest Weight { get; set; } = new MerchantShipmentPackageWeightRequest();
    
        [Newtonsoft.Json.JsonProperty("ChannelMethodCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelMethodCode { get; set; }
    
        /// <summary>The unique shipment reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantShipmentNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string MerchantShipmentNo { get; set; }
    
        /// <summary>The unique order reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The code of the country from where the package is being shipped.</summary>
        [Newtonsoft.Json.JsonProperty("ShippedFromCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string ShippedFromCountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<MerchantShipmentLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantShipmentLineRequest>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantNotificationResponse 
    {
        /// <summary>Unique identifier used by ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Indicating whether the notification is already read using the backoffice.</summary>
        [Newtonsoft.Json.JsonProperty("Read", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Read { get; set; }
    
        /// <summary>Get the created date time.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NotificationType Type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOfferGetStockResponse 
    {
        /// <summary>The product SKU.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The ChannelEngine id of the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("StockLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StockLocationId { get; set; }
    
        /// <summary>The quantity of products in stock at the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("Stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Stock { get; set; }
    
        /// <summary>The timestamp of the last stock update for the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("UpdatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOfferStockUpdateRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Stock locations data</summary>
        [Newtonsoft.Json.JsonProperty("StockLocations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MerchantStockLocationUpdateRequest> StockLocations { get; set; } = new System.Collections.ObjectModel.Collection<MerchantStockLocationUpdateRequest>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderAcknowledgementRequest 
    {
        /// <summary>Your own order reference, this will be used in consecutive order processing API calls.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The ChannelEngine order ID of the order you would like to acknowledge.</summary>
        [Newtonsoft.Json.JsonProperty("OrderId", Required = Newtonsoft.Json.Required.Always)]
        public int OrderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderCommentUpdateRequest 
    {
        /// <summary>Your own order reference for the order you would like to update the comment for.
        /// Either this field or OrderId is required</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The ChannelEngine order ID of the order you would like to update the comment for.
        /// Either this field or MerchantOrderNo is required</summary>
        [Newtonsoft.Json.JsonProperty("OrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderId { get; set; }
    
        /// <summary>The merchant comment you would like add / update for the order.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantComment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderLineExtraDataResponse 
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderLineResponse 
    {
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatusView Status { get; set; }
    
        /// <summary>Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?.</summary>
        [Newtonsoft.Json.JsonProperty("IsFulfillmentByMarketplace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsFulfillmentByMarketplace { get; set; }
    
        /// <summary>Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Gtin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gtin { get; set; }
    
        /// <summary>The product description (or title) provided by the channel.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StockLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantStockLocationResponse StockLocation { get; set; }
    
        /// <summary>The total amount of VAT charged over the value of a single unit of the ordered product
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("UnitVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitVat { get; set; }
    
        /// <summary>The total value of the order line (quantity * unit price) including VAT
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("LineTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LineTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the total value of the order line (quantity * unit price)
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("LineVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LineVat { get; set; }
    
        /// <summary>The value of a single unit of the ordered product including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalUnitPriceInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalUnitPriceInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the value of a single unit of the ordered product
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalUnitVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalUnitVat { get; set; }
    
        /// <summary>The total value of the order line (quantity * unit price) including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalLineTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalLineTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the total value of the order line (quantity * unit price)
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalLineVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalLineVat { get; set; }
    
        /// <summary>A percentage fee that is charged by the Channel for this orderline.
        /// This fee rate is based on the currency of client
        /// This field is optional, send 0 if not applicable.</summary>
        [Newtonsoft.Json.JsonProperty("OriginalFeeFixed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal OriginalFeeFixed { get; set; }
    
        /// <summary>If the product is ordered part of a bundle, this field contains the MerchantProductNo of
        /// the product bundle.</summary>
        [Newtonsoft.Json.JsonProperty("BundleProductMerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BundleProductMerchantProductNo { get; set; }
    
        /// <summary>State assigned code identifying the jurisdiction.</summary>
        [Newtonsoft.Json.JsonProperty("JurisCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JurisCode { get; set; }
    
        /// <summary>Name of a tax jurisdiction.</summary>
        [Newtonsoft.Json.JsonProperty("JurisName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JurisName { get; set; }
    
        /// <summary>VAT rate of the orderline.</summary>
        [Newtonsoft.Json.JsonProperty("VatRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal VatRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantOrderLineExtraDataResponse> ExtraData { get; set; }
    
        /// <summary>The unique product reference used by the channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string ChannelProductNo { get; set; }
    
        /// <summary>The unique product reference used by the merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The number of items of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; }
    
        /// <summary>The number of items for which cancellation was requested by the customer.
        /// Some channels allow a customer to cancel an order until it has been shipped.
        /// When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.
        /// Use this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CancellationRequestedQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int CancellationRequestedQuantity { get; set; }
    
        /// <summary>The value of a single unit of the ordered product including VAT
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("UnitPriceInclVat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal UnitPriceInclVat { get; set; }
    
        /// <summary>A fixed fee that is charged by the Channel for this orderline.
        /// This fee rate is based on the currency of the Channel
        /// This field is optional, send 0 if not applicable.</summary>
        [Newtonsoft.Json.JsonProperty("FeeFixed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal FeeFixed { get; set; }
    
        /// <summary>A percentage fee that is charged by the Channel for this orderline.
        /// This field is optional, send 0 if not applicable.</summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal FeeRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Condition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Condition Condition { get; set; }
    
        /// <summary>Expected delivery date from channels, empty if channels not support this value</summary>
        [Newtonsoft.Json.JsonProperty("ExpectedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedDeliveryDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderResponse 
    {
        /// <summary>The unique identifier used by ChannelEngine. This identifier does
        /// not have to be saved. It should only be used in a call to acknowledge the order.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>The name of the channel for this specific environment/account.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelName { get; set; }
    
        /// <summary>The unique ID of the channel for this specific environment/account.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChannelId { get; set; }
    
        /// <summary>The name of the channel across all of ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalChannelName { get; set; }
    
        /// <summary>The unique ID of the channel across all of ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GlobalChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChannelOrderSupport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderSupport ChannelOrderSupport { get; set; }
    
        /// <summary>The order reference used by the channel.
        /// This number is not guaranteed to be unique accross all orders,
        /// because different channels can use the same order number format.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelOrderNo { get; set; }
    
        /// <summary>The unique order reference used by the Merchant</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatusView Status { get; set; }
    
        /// <summary>Indicating whether the order is a business order.</summary>
        [Newtonsoft.Json.JsonProperty("IsBusinessOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBusinessOrder { get; set; }
    
        /// <summary>The date the order was acknowledged in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AcknowledgedDate { get; set; }
    
        /// <summary>The date the order was created in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>The date the order was last updated in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("UpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }
    
        /// <summary>The optional comment a merchant can add to an order.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BillingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantAddressResponse BillingAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShippingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantAddressResponse ShippingAddress { get; set; }
    
        /// <summary>The total value of the order lines including VAT
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("SubTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? SubTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the order lines
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("SubTotalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? SubTotalVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the shipping fee
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("ShippingCostsVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ShippingCostsVat { get; set; }
    
        /// <summary>The total value of the order including VAT
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("TotalInclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the total value of te order
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("TotalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? TotalVat { get; set; }
    
        /// <summary>The total value of the order lines including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalSubTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalSubTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the order lines
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalSubTotalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalSubTotalVat { get; set; }
    
        /// <summary>The shipping fee including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalShippingCostsInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalShippingCostsInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the shipping fee
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalShippingCostsVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalShippingCostsVat { get; set; }
    
        /// <summary>The total value of the order including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the total value of te order
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalTotalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalTotalVat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantOrderLineResponse> Lines { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShippingCostsInclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal ShippingCostsInclVat { get; set; }
    
        /// <summary>The customer's telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Phone { get; set; }
    
        /// <summary>The customer's email.</summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Email { get; set; }
    
        /// <summary>Optional. A company's chamber of commerce number.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyRegistrationNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CompanyRegistrationNo { get; set; }
    
        /// <summary>Optional. A company's VAT number.</summary>
        [Newtonsoft.Json.JsonProperty("VatNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string VatNo { get; set; }
    
        /// <summary>The payment method used on the order.</summary>
        [Newtonsoft.Json.JsonProperty("PaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PaymentMethod { get; set; }
    
        /// <summary>Reference or transaction id for the payment</summary>
        [Newtonsoft.Json.JsonProperty("PaymentReferenceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string PaymentReferenceNo { get; set; }
    
        /// <summary>The currency code for the amounts of the order.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string CurrencyCode { get; set; }
    
        /// <summary>The date the order was created at the channel.</summary>
        [Newtonsoft.Json.JsonProperty("OrderDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OrderDate { get; set; }
    
        /// <summary>The unique customer reference used by the channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelCustomerNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ChannelCustomerNo { get; set; }
    
        /// <summary>Extra data on the order.</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductBundlePartResponse 
    {
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Price { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductBundleResponse 
    {
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Parts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductBundlePartResponse> Parts { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductExtraDataItemRequest 
    {
        /// <summary>Name of the extra data field.</summary>
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Key { get; set; }
    
        /// <summary>Value of the extra data field.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExtraDataType Type { get; set; }
    
        /// <summary>Add this field to the export of the product feed to the channel.</summary>
        [Newtonsoft.Json.JsonProperty("IsPublic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPublic { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductExtraDataItemResponse 
    {
        /// <summary>Name of the extra data field.</summary>
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Key { get; set; }
    
        /// <summary>Value of the extra data field.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExtraDataType Type { get; set; }
    
        /// <summary>Add this field to the export of the product feed to the channel.</summary>
        [Newtonsoft.Json.JsonProperty("IsPublic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPublic { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductRequest 
    {
        /// <summary>If this product is a different version of another
        /// product (for example, all fields are the same except
        /// size), then this field should contain
        /// the 'MerchantProductNo' of the parent. The parent
        /// should already exist (or be present between the products
        /// in the content of the API call, it does not matter whether
        /// the parent is behind the child in the list).</summary>
        [Newtonsoft.Json.JsonProperty("ParentMerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string ParentMerchantProductNo { get; set; }
    
        /// <summary>If this product is a different version of another
        /// product (for example, all fields are the same except
        /// color) and itself is a parent with child products (e.g. of sizes),
        /// then this field should contain the 'MerchantProductNo' of the grandparent. The grandparent
        /// should already exist (or be present between the products
        /// in the content of the API call, it does not matter whether
        /// the grandparent is behind the child in the list).
        /// When you set this field, the ParentMerchantProductNo should be left empty.
        ///             
        /// Use this field in case of three level product hierarchy,
        /// e.g. model - color - size.
        /// This is required for channels like Otto.</summary>
        [Newtonsoft.Json.JsonProperty("ParentMerchantProductNo2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string ParentMerchantProductNo2 { get; set; }
    
        /// <summary>An optional list of key-value pairs containing
        /// extra data about this product. This data can be
        /// sent to channels or used for filtering products.</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductExtraDataItemRequest> ExtraData { get; set; }
    
        /// <summary>The name of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Name { get; set; }
    
        /// <summary>A description of the product. Can contain these HTML tags:
        /// div, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The brand of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Brand { get; set; }
    
        /// <summary>Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..</summary>
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Size { get; set; }
    
        /// <summary>Optional. The color of the product (variant).</summary>
        [Newtonsoft.Json.JsonProperty("Color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Color { get; set; }
    
        /// <summary>The EAN of GTIN of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Ean { get; set; }
    
        /// <summary>The unique product reference used by the manufacturer/vendor of the product.</summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string ManufacturerProductNumber { get; set; }
    
        /// <summary>A unique identifier of the product. (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The number of items in stock.</summary>
        [Newtonsoft.Json.JsonProperty("Stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Stock { get; set; }
    
        /// <summary>Price, including VAT.</summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal Price { get; set; }
    
        /// <summary>Manufacturer's suggested retail price.</summary>
        [Newtonsoft.Json.JsonProperty("MSRP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? MSRP { get; set; }
    
        /// <summary>Optional. The purchase price of the product. Useful for repricing.</summary>
        [Newtonsoft.Json.JsonProperty("PurchasePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? PurchasePrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VatRateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatRateType VatRateType { get; set; }
    
        /// <summary>Shipping cost of the product.</summary>
        [Newtonsoft.Json.JsonProperty("ShippingCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ShippingCost { get; set; }
    
        /// <summary>A textual representation of the shippingtime.
        /// For example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.</summary>
        [Newtonsoft.Json.JsonProperty("ShippingTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string ShippingTime { get; set; }
    
        /// <summary>A URL pointing to the merchant's webpage
        /// which displays this product.</summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Url { get; set; }
    
        /// <summary>A URL at which an image of this product
        /// can be found.</summary>
        [Newtonsoft.Json.JsonProperty("ImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ImageUrl { get; set; }
    
        /// <summary>Url to an additional image of product (1).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl1 { get; set; }
    
        /// <summary>Url to an additional image of product (2).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl2 { get; set; }
    
        /// <summary>Url to an additional image of product (3).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl3 { get; set; }
    
        /// <summary>Url to an additional image of product (4).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl4 { get; set; }
    
        /// <summary>Url to an additional image of product (5).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl5 { get; set; }
    
        /// <summary>Url to an additional image of product (6).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl6 { get; set; }
    
        /// <summary>Url to an additional image of product (7).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl7 { get; set; }
    
        /// <summary>Url to an additional image of product (8).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl8 { get; set; }
    
        /// <summary>Url to an additional image of product (9).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl9 { get; set; }
    
        /// <summary>The category to which this product belongs.
        /// Please supply this field in the following format:
        /// 'maincategory &gt; category &gt; subcategory'
        /// For example:
        /// 'vehicles &gt; bikes &gt; mountainbike'.</summary>
        [Newtonsoft.Json.JsonProperty("CategoryTrail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryTrail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductResponse 
    {
        /// <summary>Is the product active for the Merchant?.</summary>
        [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductExtraDataItemResponse> ExtraData { get; set; }
    
        /// <summary>The name of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Name { get; set; }
    
        /// <summary>A description of the product. Can contain these HTML tags:
        /// div, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The brand of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Brand { get; set; }
    
        /// <summary>Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..</summary>
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Size { get; set; }
    
        /// <summary>Optional. The color of the product (variant).</summary>
        [Newtonsoft.Json.JsonProperty("Color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Color { get; set; }
    
        /// <summary>The EAN of GTIN of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Ean { get; set; }
    
        /// <summary>The unique product reference used by the manufacturer/vendor of the product.</summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string ManufacturerProductNumber { get; set; }
    
        /// <summary>A unique identifier of the product. (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The number of items in stock.</summary>
        [Newtonsoft.Json.JsonProperty("Stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Stock { get; set; }
    
        /// <summary>Price, including VAT.</summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal Price { get; set; }
    
        /// <summary>Manufacturer's suggested retail price.</summary>
        [Newtonsoft.Json.JsonProperty("MSRP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? MSRP { get; set; }
    
        /// <summary>Optional. The purchase price of the product. Useful for repricing.</summary>
        [Newtonsoft.Json.JsonProperty("PurchasePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? PurchasePrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VatRateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatRateType VatRateType { get; set; }
    
        /// <summary>Shipping cost of the product.</summary>
        [Newtonsoft.Json.JsonProperty("ShippingCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ShippingCost { get; set; }
    
        /// <summary>A textual representation of the shippingtime.
        /// For example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.</summary>
        [Newtonsoft.Json.JsonProperty("ShippingTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string ShippingTime { get; set; }
    
        /// <summary>A URL pointing to the merchant's webpage
        /// which displays this product.</summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Url { get; set; }
    
        /// <summary>A URL at which an image of this product
        /// can be found.</summary>
        [Newtonsoft.Json.JsonProperty("ImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ImageUrl { get; set; }
    
        /// <summary>Url to an additional image of product (1).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl1 { get; set; }
    
        /// <summary>Url to an additional image of product (2).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl2 { get; set; }
    
        /// <summary>Url to an additional image of product (3).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl3 { get; set; }
    
        /// <summary>Url to an additional image of product (4).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl4 { get; set; }
    
        /// <summary>Url to an additional image of product (5).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl5 { get; set; }
    
        /// <summary>Url to an additional image of product (6).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl6 { get; set; }
    
        /// <summary>Url to an additional image of product (7).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl7 { get; set; }
    
        /// <summary>Url to an additional image of product (8).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl8 { get; set; }
    
        /// <summary>Url to an additional image of product (9).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ExtraImageUrl9 { get; set; }
    
        /// <summary>The category to which this product belongs.
        /// Please supply this field in the following format:
        /// 'maincategory &gt; category &gt; subcategory'
        /// For example:
        /// 'vehicles &gt; bikes &gt; mountainbike'.</summary>
        [Newtonsoft.Json.JsonProperty("CategoryTrail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryTrail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductWithBuyBoxPrice 
    {
        /// <summary>Product SKU number</summary>
        [Newtonsoft.Json.JsonProperty("Sku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sku { get; set; }
    
        /// <summary>Product GTIN</summary>
        [Newtonsoft.Json.JsonProperty("Gtin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gtin { get; set; }
    
        /// <summary>Price of Buy box winner (excl. shipping cost)
        /// Note: not all channels have a separate shipping cost field (e.g. bol.com), so can be the same as BuyBoxPriceInclShipping</summary>
        [Newtonsoft.Json.JsonProperty("BuyBoxPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? BuyBoxPrice { get; set; }
    
        /// <summary>Price of Buy box winner (incl. shipping cost).
        /// If null, then there is no data or no Buy box winner</summary>
        [Newtonsoft.Json.JsonProperty("BuyBoxPriceInclShipping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? BuyBoxPriceInclShipping { get; set; }
    
        /// <summary>Are you the Buy box winner or not?</summary>
        [Newtonsoft.Json.JsonProperty("IsMerchantBuyBoxWinner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsMerchantBuyBoxWinner { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnAcknowledgeRequest 
    {
        [Newtonsoft.Json.JsonProperty("ReturnId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReturnId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MerchantReturnNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantReturnNo { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnLineRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Number of items of the product in this return.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; }
    
        /// <summary>Extra data on the returnline. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnLineResponse 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrderLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantOrderLineResponse OrderLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShipmentStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentLineStatus ShipmentStatus { get; set; }
    
        /// <summary>Number of items of the product in this return.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; }
    
        /// <summary>Extra data on the returnline. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnLineUpdateRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The amount of items that have been accepted.</summary>
        [Newtonsoft.Json.JsonProperty("AcceptedQuantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AcceptedQuantity { get; set; }
    
        /// <summary>The amount of items that have been rejected.</summary>
        [Newtonsoft.Json.JsonProperty("RejectedQuantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int RejectedQuantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnRequest 
    {
        /// <summary>The unique order reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The unique return reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantReturnNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantReturnNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<MerchantReturnLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantReturnLineRequest>();
    
        /// <summary>The unique return reference used by ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnReason Reason { get; set; }
    
        /// <summary>Optional. Comment of customer on the (reason of) the return.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string CustomerComment { get; set; }
    
        /// <summary>Optional. Comment of merchant on the return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string MerchantComment { get; set; }
    
        /// <summary>Refund amount incl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundInclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal RefundInclVat { get; set; }
    
        /// <summary>Refund amount excl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundExclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal RefundExclVat { get; set; }
    
        /// <summary>The date at which the return was originally created in the source system (if available).</summary>
        [Newtonsoft.Json.JsonProperty("ReturnDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReturnDate { get; set; }
    
        /// <summary>Extra data on the return. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnResponse 
    {
        /// <summary>The unique order reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The unique order reference used by the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelOrderNo { get; set; }
    
        /// <summary>The id of the channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChannelId { get; set; }
    
        /// <summary>The id of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GlobalChannelId { get; set; }
    
        /// <summary>The name of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalChannelName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantReturnLineResponse> Lines { get; set; }
    
        /// <summary>The date at which the return was created in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>The date at which the return was last modified in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("UpdatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
        /// <summary>The unique return reference used by the Merchant, will be empty in case of a channel or unacknowledged return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantReturnNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReturnNo { get; set; }
    
        /// <summary>The unique return reference used by the Channel, will be empty in case of a merchant return.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelReturnNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelReturnNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnStatus Status { get; set; }
    
        /// <summary>Date of acknowledgement</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AcknowledgedDate { get; set; }
    
        /// <summary>The unique return reference used by ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnReason Reason { get; set; }
    
        /// <summary>Optional. Comment of customer on the (reason of) the return.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string CustomerComment { get; set; }
    
        /// <summary>Optional. Comment of merchant on the return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string MerchantComment { get; set; }
    
        /// <summary>Refund amount incl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundInclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal RefundInclVat { get; set; }
    
        /// <summary>Refund amount excl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundExclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal RefundExclVat { get; set; }
    
        /// <summary>The date at which the return was originally created in the source system (if available).</summary>
        [Newtonsoft.Json.JsonProperty("ReturnDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReturnDate { get; set; }
    
        /// <summary>Extra data on the return. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnUpdateRequest 
    {
        /// <summary>The ChannelEngine return ID of the return you would like to update.</summary>
        [Newtonsoft.Json.JsonProperty("ReturnId", Required = Newtonsoft.Json.Required.Always)]
        public int ReturnId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<MerchantReturnLineUpdateRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantReturnLineUpdateRequest>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantSettingsResponse 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultCultureCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultCultureCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SettingsResponse Settings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Vat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VatSettingsResponse> Vat { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentLabelCarrierRequest 
    {
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<MerchantShipmentLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantShipmentLineRequest>();
    
        [Newtonsoft.Json.JsonProperty("Dimensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MerchantShipmentPackageDimensionsRequest Dimensions { get; set; } = new MerchantShipmentPackageDimensionsRequest();
    
        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MerchantShipmentPackageWeightRequest Weight { get; set; } = new MerchantShipmentPackageWeightRequest();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentLabelCarrierResponse 
    {
        /// <summary>The channel's name for the shipping label carrier</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The channel's code for the shipping label carrier</summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Optional. Any restrictions on this carriers, e.g. weight and/or dimensions</summary>
        [Newtonsoft.Json.JsonProperty("Restrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Restrictions { get; set; }
    
        /// <summary>Optional. Price for this shipping label</summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Recommendation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChannelCarrierRecommendationApi Recommendation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CollectionMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChannelCarrierCollectionMethodApi CollectionMethod { get; set; }
    
        /// <summary>Optional. When to handover the package to the carrier
        /// It is in the ISO format including the timezone offset.
        /// E.g. 2020-10-03T18:00:00+02:00
        /// which is 3rd Oct 2020, at 18:00 PM in Amsterdam (Summer Time aka CEST: UTC +2:00 )</summary>
        [Newtonsoft.Json.JsonProperty("HandoverDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HandoverDateTime { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentLineRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Extra data on the order. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
        /// <summary>Number of items of the product in the shipment.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentLineResponse 
    {
        /// <summary>The unique product reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The unique product reference used by the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelProductNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrderLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantOrderLineResponse OrderLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShipmentStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentLineStatus ShipmentStatus { get; set; }
    
        /// <summary>Extra data on the shipment line. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
        /// <summary>Number of items of the product in the shipment.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentPackageDimensionsRequest 
    {
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageDimensionsUnit Unit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentPackageWeightRequest 
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageWeightUnit Unit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentRequest 
    {
        /// <summary>The unique shipment reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantShipmentNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string MerchantShipmentNo { get; set; }
    
        /// <summary>The unique order reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<MerchantShipmentLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantShipmentLineRequest>();
    
        /// <summary>Extra data on the order. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
        /// <summary>The unique shipping reference used by the Shipping carrier (track&amp;trace number).</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TrackTraceNo { get; set; }
    
        /// <summary>A link to a page of the carrier where the customer can track the shipping of her package.</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string TrackTraceUrl { get; set; }
    
        /// <summary>The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned.</summary>
        [Newtonsoft.Json.JsonProperty("ReturnTrackTraceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ReturnTrackTraceNo { get; set; }
    
        /// <summary>Shipment method: the carrier used for shipping the package. E.g. DHL, postNL.</summary>
        [Newtonsoft.Json.JsonProperty("Method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Method { get; set; }
    
        /// <summary>The code of the country from where the package is being shipped.</summary>
        [Newtonsoft.Json.JsonProperty("ShippedFromCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string ShippedFromCountryCode { get; set; }
    
        /// <summary>The date at which the shipment was originally created in the source system (if available).</summary>
        [Newtonsoft.Json.JsonProperty("ShipmentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipmentDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentResponse 
    {
        /// <summary>The unique shipment reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantShipmentNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantShipmentNo { get; set; }
    
        /// <summary>The unique order reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The unique shipment reference used by the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelShipmentNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelShipmentNo { get; set; }
    
        /// <summary>The unique order reference used by the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantShipmentLineResponse> Lines { get; set; }
    
        /// <summary>The date at which the shipment was created in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>The date at which the shipment was last modified in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("UpdatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
        /// <summary>Extra data on the order. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
        /// <summary>The unique shipping reference used by the Shipping carrier (track&amp;trace number).</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TrackTraceNo { get; set; }
    
        /// <summary>A link to a page of the carrier where the customer can track the shipping of her package.</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string TrackTraceUrl { get; set; }
    
        /// <summary>The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned.</summary>
        [Newtonsoft.Json.JsonProperty("ReturnTrackTraceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ReturnTrackTraceNo { get; set; }
    
        /// <summary>Shipment method: the carrier used for shipping the package. E.g. DHL, postNL.</summary>
        [Newtonsoft.Json.JsonProperty("Method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Method { get; set; }
    
        /// <summary>The code of the country from where the package is being shipped.</summary>
        [Newtonsoft.Json.JsonProperty("ShippedFromCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string ShippedFromCountryCode { get; set; }
    
        /// <summary>The date at which the shipment was originally created in the source system (if available).</summary>
        [Newtonsoft.Json.JsonProperty("ShipmentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipmentDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentTrackingRequest 
    {
        /// <summary>Shipment method (carrier).</summary>
        [Newtonsoft.Json.JsonProperty("Method", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Method { get; set; }
    
        /// <summary>The unique shipping reference used by the Shipping carrier (track &amp; trace number).</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TrackTraceNo { get; set; }
    
        /// <summary>The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned.</summary>
        [Newtonsoft.Json.JsonProperty("ReturnTrackTraceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ReturnTrackTraceNo { get; set; }
    
        /// <summary>A link to a page of the carrier where the customer can track the shipping of her package.</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string TrackTraceUrl { get; set; }
    
        /// <summary>The code of the country from where the package is being shipped.</summary>
        [Newtonsoft.Json.JsonProperty("ShippedFromCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string ShippedFromCountryCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantSingleOrderReturnLineResponse 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The accepted quantity of returned products in this orderline.</summary>
        [Newtonsoft.Json.JsonProperty("AcceptedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AcceptedQuantity { get; set; }
    
        /// <summary>The rejected quantity of returned products in this orderline.</summary>
        [Newtonsoft.Json.JsonProperty("RejectedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RejectedQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrderLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantOrderLineResponse OrderLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShipmentStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentLineStatus ShipmentStatus { get; set; }
    
        /// <summary>Number of items of the product in this return.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; }
    
        /// <summary>Extra data on the returnline. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantSingleOrderReturnResponse 
    {
        /// <summary>The unique order reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantSingleOrderReturnLineResponse> Lines { get; set; }
    
        /// <summary>The date at which the return was created in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>The date at which the return was last modified in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("UpdatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
        /// <summary>The unique return reference used by the Merchant, will be empty in case of a channel or unacknowledged return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantReturnNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReturnNo { get; set; }
    
        /// <summary>The unique return reference used by the Channel, will be empty in case of a merchant return.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelReturnNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelReturnNo { get; set; }
    
        /// <summary>The id of the channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChannelId { get; set; }
    
        /// <summary>The id of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GlobalChannelId { get; set; }
    
        /// <summary>The name of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalChannelName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnStatus Status { get; set; }
    
        /// <summary>The unique return reference used by ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnReason Reason { get; set; }
    
        /// <summary>Optional. Comment of customer on the (reason of) the return.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string CustomerComment { get; set; }
    
        /// <summary>Optional. Comment of merchant on the return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string MerchantComment { get; set; }
    
        /// <summary>Refund amount incl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundInclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal RefundInclVat { get; set; }
    
        /// <summary>Refund amount excl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundExclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal RefundExclVat { get; set; }
    
        /// <summary>The date at which the return was originally created in the source system (if available).</summary>
        [Newtonsoft.Json.JsonProperty("ReturnDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReturnDate { get; set; }
    
        /// <summary>Extra data on the return. Each item must have an unqiue key</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantStockLocationAddressRequest 
    {
        [Newtonsoft.Json.JsonProperty("CountryIso", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryIso { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string StreetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ZipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HouseNr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string HouseNr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HouseNrAddition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string HouseNrAddition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Region { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantStockLocationCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }
    
        /// <summary>If false: only use fulfillment by channel, else (also) use merchant fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("FallBackToDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FallBackToDefault { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantStockLocationAddressRequest Address { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantStockLocationResponse 
    {
        /// <summary>The ChannelEngine id of the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>The ChannelEngine name of the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantStockLocationUpdateRequest 
    {
        /// <summary>The stock of the product. Should not be negative.</summary>
        [Newtonsoft.Json.JsonProperty("Stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Stock { get; set; }
    
        /// <summary>The stock location id of updated stok.
        /// If not provided stock from default stock location will be updated.</summary>
        [Newtonsoft.Json.JsonProperty("StockLocationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StockLocationId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantStockPriceUpdateRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The stock of the product. Should not be negative.</summary>
        [Newtonsoft.Json.JsonProperty("Stock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Stock { get; set; }
    
        /// <summary>The price of the product. Should not be negative.</summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public decimal? Price { get; set; }
    
        /// <summary>The stock location id of updated stok.
        /// If not provided stock from default stock location will be updated.</summary>
        [Newtonsoft.Json.JsonProperty("StockLocationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StockLocationId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantWebhookRequest 
    {
        /// <summary>The unique webhook name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; }
    
        /// <summary>The callback URL using by the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1028)]
        public string Url { get; set; }
    
        /// <summary>Determining if the webhook should be active and callbacks should proceed or not.</summary>
        [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        /// <summary>Events supported by the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("Events", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<WebhookEventType> Events { get; set; } = new System.Collections.ObjectModel.Collection<WebhookEventType>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantWebhookResponse 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<WebhookEventType> Events { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NotificationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_ANONYMIZED_BY_REQUEST")]
        CHANNEL_ORDER_ANONYMIZED_BY_REQUEST = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_ANONYMIZED_AUTOMATICALLY")]
        CHANNEL_ORDER_ANONYMIZED_AUTOMATICALLY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_CANCELLATION_REQUEST_NEW")]
        CHANNEL_ORDER_CANCELLATION_REQUEST_NEW = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_CORRECTION_NEEDED")]
        CHANNEL_ORDER_CORRECTION_NEEDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_DUPLICATE_LINE")]
        CHANNEL_ORDER_DUPLICATE_LINE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_INVOICE_SEND_FAILED")]
        CHANNEL_ORDER_INVOICE_SEND_FAILED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_IMPORT_FAILED")]
        CHANNEL_ORDER_IMPORT_FAILED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_NEW")]
        CHANNEL_ORDER_NEW = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_OVERDUE")]
        CHANNEL_ORDER_OVERDUE = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_PRODUCT_DATA_EXPORT_FAILED")]
        CHANNEL_PRODUCT_DATA_EXPORT_FAILED = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_PRODUCT_DATA_IMPORT_FAILED")]
        CHANNEL_PRODUCT_DATA_IMPORT_FAILED = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_RETURN_EXPORT_FAILED")]
        CHANNEL_RETURN_EXPORT_FAILED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_RETURN_IMPORT_FAILED")]
        CHANNEL_RETURN_IMPORT_FAILED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_RETURN_NEW")]
        CHANNEL_RETURN_NEW = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_RETURN_OVERDUE")]
        CHANNEL_RETURN_OVERDUE = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_REFUND_EXPORT_FAILED")]
        CHANNEL_REFUND_EXPORT_FAILED = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_SHIPMENT_IMPORT_FAILED")]
        CHANNEL_SHIPMENT_IMPORT_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_SHIPMENT_IMPORT_STATUS_FAILED")]
        CHANNEL_SHIPMENT_IMPORT_STATUS_FAILED = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_SHIPMENT_EXPORT_FAILED")]
        CHANNEL_SHIPMENT_EXPORT_FAILED = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_SHIPMENT_IMPORT_MISSING_LINE_FAILED")]
        CHANNEL_SHIPMENT_IMPORT_MISSING_LINE_FAILED = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_FULFILLMENT_SHIPMENT_IMPORT_STATUS_FAILED")]
        CHANNEL_FULFILLMENT_SHIPMENT_IMPORT_STATUS_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_FAILED")]
        CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_SUCCEEDED")]
        CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_SUCCEEDED = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_FULFILLMENT_SHIPMENT_LINE_FOR_CLOSED_ORDER")]
        CHANNEL_FULFILLMENT_SHIPMENT_LINE_FOR_CLOSED_ORDER = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNELENGINE_SUPPORT_NOTIFICATION")]
        CHANNELENGINE_SUPPORT_NOTIFICATION = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNELENGINE_WEBHOOK_RQUEST_FAILED")]
        CHANNELENGINE_WEBHOOK_RQUEST_FAILED = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEED_NO_PRODUCTS_FAILED")]
        FEED_NO_PRODUCTS_FAILED = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEED_IMPORT_FAILED")]
        FEED_IMPORT_FAILED = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL_MESSAGE")]
        GLOBAL_MESSAGE = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MERCHANT_ORDER_EXPORT_FAILED")]
        MERCHANT_ORDER_EXPORT_FAILED = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PLUGIN_INVALID_SETTING")]
        PLUGIN_INVALID_SETTING = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PLUGIN_DEACTIVATED")]
        PLUGIN_DEACTIVATED = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_BUNDLE_IMPORT_FAILED")]
        PRODUCT_BUNDLE_IMPORT_FAILED = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_REFUND_LINE_ITEMS_ERROR")]
        CHANNEL_REFUND_LINE_ITEMS_ERROR = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_CANCELLATION_EXPORT_FAILED")]
        CHANNEL_CANCELLATION_EXPORT_FAILED = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MERCHANT_ORDER_EXPORT_LINES_CANCELLED")]
        MERCHANT_ORDER_EXPORT_LINES_CANCELLED = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OAUTH_REFRESH_TOKEN_ABOUT_TO_EXPIRE")]
        OAUTH_REFRESH_TOKEN_ABOUT_TO_EXPIRE = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MERCHANT_CANCELLATION_IMPORT_FAILED")]
        MERCHANT_CANCELLATION_IMPORT_FAILED = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_TOO_LONG_ON_NEW")]
        CHANNEL_ORDER_TOO_LONG_ON_NEW = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MERCHANT_STOCK_UPDATE_FAILED")]
        MERCHANT_STOCK_UPDATE_FAILED = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEED_INVALID_PRODUCTS_OCCURED")]
        FEED_INVALID_PRODUCTS_OCCURED = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_SHIPMENT_EXPORT_INVALID_MERCHANTSHIPMENTNO")]
        CHANNEL_SHIPMENT_EXPORT_INVALID_MERCHANTSHIPMENTNO = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_PRODUCT_OFFER_EXPORT_FAILED")]
        CHANNEL_PRODUCT_OFFER_EXPORT_FAILED = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TRANSLATION_IMAGE_TAGS_BROKEN")]
        TRANSLATION_IMAGE_TAGS_BROKEN = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_RETURN_DELETED")]
        CHANNEL_RETURN_DELETED = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TAX_PROVIDER_NOT_ACTIVATED")]
        TAX_PROVIDER_NOT_ACTIVATED = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_LOCATION_NOT_FOUND")]
        STOCK_LOCATION_NOT_FOUND = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_VAT_RATE_OVERLAPPING_RATES")]
        CUSTOM_VAT_RATE_OVERLAPPING_RATES = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TRANSLATION_FAILED")]
        TRANSLATION_FAILED = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_CANNOT_BE_FULFILLED")]
        ORDER_CANNOT_BE_FULFILLED = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_FULFILLMENT_SHIPMENT_RECEIVED")]
        CHANNEL_FULFILLMENT_SHIPMENT_RECEIVED = 50,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Operation 
    {
        [Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Op { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderStatusView
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPED")]
        SHIPPED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_BACKORDER")]
        IN_BACKORDER = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MANCO")]
        MANCO = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_COMBI")]
        IN_COMBI = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RETURNED")]
        RETURNED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUIRES_CORRECTION")]
        REQUIRES_CORRECTION = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AWAITING_PAYMENT")]
        AWAITING_PAYMENT = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderSupport
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ORDERS")]
        ORDERS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPLIT_ORDERS")]
        SPLIT_ORDERS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPLIT_ORDER_LINES")]
        SPLIT_ORDER_LINES = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PackageDimensionsUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCH")]
        INCH = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PackageWeightUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GRAM")]
        GRAM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OUNCE")]
        OUNCE = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PatchMerchantProductDto 
    {
        /// <summary>Fields to update</summary>
        [Newtonsoft.Json.JsonProperty("PropertiesToUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PropertiesToUpdate { get; set; }
    
        /// <summary>Products to be updated</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductRequestModels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductRequest> MerchantProductRequestModels { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductCreationResult 
    {
        [Newtonsoft.Json.JsonProperty("RejectedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RejectedCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AcceptedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AcceptedCount { get; set; }
    
        /// <summary>Messages about the rejected products.</summary>
        [Newtonsoft.Json.JsonProperty("ProductMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductMessage> ProductMessages { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductMessage 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReturnReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_DEFECT")]
        PRODUCT_DEFECT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_UNSATISFACTORY")]
        PRODUCT_UNSATISFACTORY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WRONG_PRODUCT")]
        WRONG_PRODUCT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_PRODUCTS")]
        TOO_MANY_PRODUCTS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUSED")]
        REFUSED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUSED_DAMAGED")]
        REFUSED_DAMAGED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WRONG_ADDRESS")]
        WRONG_ADDRESS = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_COLLECTED")]
        NOT_COLLECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WRONG_SIZE")]
        WRONG_SIZE = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReturnStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SettingsResponse 
    {
        [Newtonsoft.Json.JsonProperty("Shipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSettingsResponse Shipment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Advanced", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdvanceSettingsResponse Advanced { get; set; }
    
    
    }
    
    /// <summary>Shipment is fully fulfilled by channel or merchant
    /// so no make sense to use FulfillmentType for orders
    /// It is created to keep it consistent with others</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShipmentFulfillmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_MERCHANT")]
        ONLY_MERCHANT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_CHANNEL")]
        ONLY_CHANNEL = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShipmentLineStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPED")]
        SHIPPED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_BACKORDER")]
        IN_BACKORDER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MANCO")]
        MANCO = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentSettingsResponse 
    {
        [Newtonsoft.Json.JsonProperty("DefaultTrackedShipmentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultTrackedShipmentMethod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultUntrackedShipmentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultUntrackedShipmentMethod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutomaticallySetShipmentMethodAfterMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AutomaticallySetShipmentMethodAfterMinutes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SingleOfDictionaryOfStringAndListOfString 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SingleOfMerchantProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantProductResponse Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SingleOfMerchantSettingsResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantSettingsResponse Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SingleOfProductCreationResult 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductCreationResult Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum VatRateType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REDUCED")]
        REDUCED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUPER_REDUCED")]
        SUPER_REDUCED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXEMPT")]
        EXEMPT = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VatSettingsResponse 
    {
        [Newtonsoft.Json.JsonProperty("CountryIso", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryIso { get; set; }
    
        [Newtonsoft.Json.JsonProperty("No", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string No { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StandardRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal StandardRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReducedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ReducedRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SuperReducedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? SuperReducedRate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WebhookEventType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ORDERS_CREATE")]
        ORDERS_CREATE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTS_CHANGE")]
        PRODUCTS_CHANGE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RETURNS_CHANGE")]
        RETURNS_CHANGE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENTS_CHANGE")]
        SHIPMENTS_CHANGE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOTIFICATIONS_CREATE")]
        NOTIFICATIONS_CREATE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE_PRODUCTS_CHANGE")]
        BUNDLE_PRODUCTS_CHANGE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ORDERS_CHANGE")]
        ORDERS_CHANGE = 6,
    
    }

    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108